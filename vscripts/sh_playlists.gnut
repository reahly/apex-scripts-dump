//
//

#if CLIENT || UI 
global function GetCurrentPlaylistVarTimestamp

global function GetMaxTeamSizeForPlaylist
global function GetPlaylistMaps

global function GetVisiblePlaylistNames
global function GetPlaylistModNames
global function GetPlaylistIndexForName
global function Playlist_GetLTMSlotPlaylist
global function Playlist_GetNewModeVersion
global function Playlist_GetScheduleData
global function ShPlaylist_Init
global function GetPlaylistRotationGroup
#endif

#if CLIENT || UI 
global function CanPlaylistFitPartySize
global function GetModeEmblemImage
global function GetImageFromImageMap
global function GetImageFromMiniIconMap
global function GetBinkFromBinkMap
#endif

#if(UI)
global function GetEmblemColor
global function GetPlaylistRotationNextTime
global function GetPlaylistRotationNextTimeFormatedString
global function GetPlaylistsInCurrentRotationGroup
global function GetPanelImageKeyForCurrentRotationGroup
global function GetMapDisplayNameForCurrentRotationGroup
global function GetCurrentPlaylistInUiSlot
global function PlaylistHasRotationGroup
global function GetDefaultPlaylist
global function PartyHasPlaylistAccountLevelRequired

global int rotationDurationMoreThanDayCount = 0
#endif

#if ( CLIENT || UI ) && DEV 
global function PrintPlaylists
#endif


#if CLIENT || UI 
global const table<string, asset> GAMEMODE_IMAGE_MAP = {
	play_apex = $"rui/menu/gamemode/play_apex",
	apex_elite = $"rui/menu/gamemode/apex_elite",
	training = $"rui/menu/gamemode/training",
	firing_range = $"rui/menu/gamemode/firing_range",
	generic_01 = $"rui/menu/gamemode/generic_01",
	generic_02 = $"rui/menu/gamemode/generic_02",
	ranked_1 = $"rui/menu/gamemode/ranked_1",
	ranked_2 = $"rui/menu/gamemode/ranked_2",
	ranked_3 = $"rui/menu/gamemode/ranked_3",
	solo_iron_crown = $"rui/menu/gamemode/solo_iron_crown",
	solo = $"rui/menu/gamemode/solo_iron_crown",
	duos = $"rui/menu/gamemode/duos_v2",
	trios = $"rui/menu/gamemode/trios",
	worlds_edge = $"rui/menu/gamemode/worlds_edge",
	worlds_edge_mu1 = $"rui/menu/gamemode/worlds_edge_mu1",
	panel_worlds_edge_mu1 = $"rui/menu/gamemode/playlist_bg_worldsedge",
	panel_olympus = $"rui/menu/gamemode/playlist_bg_olympus",
	canyon_land_mu1 = $"rui/menu/gamemode/play_apex",
	panel_canyon_land_mu1 = $"rui/menu/gamemode/playlist_bg_kc",
	panel_canyon_land_mu2 = $"rui/menu/gamemode/playlist_bg_kc_mu2",
	panel_canyon_land_mu3 = $"rui/menu/gamemode/playlist_bg_kc_mu3",
	panel_canyon_land_night = $"rui/menu/gamemode/playlist_bg_kc_night",
	shotguns_and_snipers = $"rui/menu/gamemode/shotguns_and_snipers",

	panel_worlds_edge_mu2_airdrop = $"rui/menu/gamemode/playlist_bg_worldsedge_airdrop",
	panel_olympus_airdrop = $"rui/menu/gamemode/playlist_bg_olympus_airdrop",
	panel_canyon_land_mu2_airdrop = $"rui/menu/gamemode/playlist_bg_kc_mu2_airdrop",
	duos_airdrop = $"rui/menu/gamemode/duos_v2",
	trios_airdrop = $"rui/menu/gamemode/trios",

                  
		shadow_squad = $"rui/menu/gamemode/shadow_squad",
       
                               
		shadow_royale = $"rui/menu/gamemode/shadow_royale",
       
                       
		winter_express = $"rui/menu/gamemode/winter_express",
       
                           
		tournament = $"rui/menu/gamemode/tournament",
       
                           
                                                       
                                                     
                                                       
       
                               
                                                     
                                                                                     
                                                                                            
                                                                                                
       
	live_die_live = $"rui/menu/gamemode/live_die_live",
	third_person = $"rui/menu/gamemode/third_person",
	always_be_closing = $"rui/menu/gamemode/always_be_closing",
	night = $"rui/menu/gamemode/night",
	dummies = $"rui/menu/gamemode/dummies",
	deja_loot = $"rui/menu/gamemode/deja_loot",
                          
	campfire = $"rui/menu/gamemode/flashpoint",
       
	explore_mode = $"rui/menu/gamemode/playlist_bg_olympus_explore",
}

global const table<string, asset> GAMEMODE_MINI_ICON_MAP = {
	airdrop = $"rui/menu/gamemode_emblem/airdrop_takeover",
}

const table<string, asset> GAMEMODE_BINK_MAP = {
	play_apex = $"media/gamemodes/play_apex.bik",
	apex_elite = $"media/gamemodes/apex_elite.bik",
	training = $"media/gamemodes/training.bik",
	generic_01 = $"media/gamemodes/generic_01.bik",
	generic_02 = $"media/gamemodes/generic_02.bik",
	ranked_1 = $"media/gamemodes/ranked_1.bik",
	ranked_2 = $"media/gamemodes/ranked_2.bik",
	ranked_3 = $"media/gamemodes/ranked_3.bik",
	solo_iron_crown = $"media/gamemodes/solo_iron_crown.bik",
	solo = $"media/gamemodes/solo_iron_crown.bik",
	duos = $"media/gamemodes/duos_v2.bik",
	trios = $"media/gamemodes/trios.bik",
	worlds_edge = $"media/gamemodes/worlds_edge.bik",
	worlds_edge_mu1 = $"media/gamemodes/worlds_edge_mu1.bik",
	canyon_land_mu1 = $"media/gamemodes/play_apex.bik",
	shotguns_and_snipers = $"media/gamemodes/shotguns_and_snipers.bik",
                  
		shadow_squad = $"media/gamemodes/shadow_squad.bik",
       
                               
		shadow_royale = $"media/gamemodes/shadow_squad.bik",
       
                       
		winter_express = $"media/gamemodes/winter_express.bik",
       
                           
		tournament = $"media/gamemodes/play_apex.bik",
       
	live_die_live = $"media/gamemodes/live_die_live.bik",
	third_person = $"media/gamemodes/third_person.bik",
	always_be_closing = $"media/gamemodes/always_be_closing.bik",
	night = $"media/gamemodes/night.bik",
	dummies = $"media/gamemodes/dummies.bik",
	deja_loot = $"media/gamemodes/deja_loot.bik",
                          
	campfire = $"media/gamemodes/campfire.bik",
       
                           
                                                       
       
}
#endif //


//
//
//
//
//

global typedef PlaylistName string
global typedef PlaylistVarName string

#if CLIENT || UI 
global struct TimestampRange
{
	int startUnixTime //
	int endUnixTime //
}
global struct PlaylistScheduleData
{
	array<TimestampRange> blocks
	TimestampRange ornull currentBlock
	TimestampRange ornull nextBlock
}
#endif



//
//
//
//
//

#if(ASSERTING)
var ASSERTING_integerRegexp = null
var ASSERTING_floatRegexp = null
#endif

struct CachedPlaylistData
{
	string name
	int    index
	bool   visible
	bool   hubOnly
	bool   optInOnly
	bool   isPvEOnly
	bool   isPrivateMatchPlaylist
	string ui_slot
	string rotationGroup

	PlaylistScheduleData& playlistSchedule
}

struct
{
	array<CachedPlaylistData> cachedPlaylistArray
	table<string, CachedPlaylistData> cachedPlaylistMap

} file



//
//
//
//
//

#if CLIENT || UI 
int ornull function GetCurrentPlaylistVarTimestamp( string varName, int defaultVal )
{
	return DateTimeStringToUnixTimestamp( GetCurrentPlaylistVarString( varName, string(defaultVal) ) )
}
#endif


#if CLIENT || UI 
int function GetMaxTeamSizeForPlaylist( PlaylistName playlistName )
{
	int maxTeamSize = GetPlaylistVarInt( playlistName, "max_team_size", 0 )
	if ( maxTeamSize > 0 )
		return maxTeamSize

	int maxPlayers = GetPlaylistVarInt( playlistName, "max_players", 0 )
	int maxTeams   = GetPlaylistVarInt( playlistName, "max_teams", 0 )
	if ( maxTeams == 0 )
		return maxPlayers
	return maxPlayers / maxTeams
}
#endif


#if CLIENT || UI 
array<string> function GetPlaylistMaps( PlaylistName playlistName )
{
	array<string> mapsArray

	int numModes = GetPlaylistGamemodesCount( playlistName )
	for ( int modeIndex = 0; modeIndex < numModes; modeIndex++ )
	{
		int numMaps = GetPlaylistGamemodeByIndexMapsCount( playlistName, modeIndex )
		for ( int mapIndex = 0; mapIndex < numMaps; mapIndex++ )
		{
			string mapName = GetPlaylistGamemodeByIndexMapByIndex( playlistName, modeIndex, mapIndex )
			if ( mapsArray.contains( mapName ) )
				continue

			mapsArray.append( mapName )
		}
	}

	return mapsArray
}
#endif


#if CLIENT || UI 
bool function CanPlaylistFitPartySize( PlaylistName playlistName, int partySize, bool sendOpenInvite )
{
	int maxPlayersPerTeam = GetMaxTeamSizeForPlaylist( playlistName )
	if ( partySize > maxPlayersPerTeam )
		return false

	if ( sendOpenInvite && maxPlayersPerTeam == 1 )
		return false

	bool partiesAllowed = GetPlaylistVarBool( playlistName, "parties_allowed", true )
	if ( !partiesAllowed )
	{
		if ( partySize > 1 )
			return false

		if ( sendOpenInvite )
			return false
	}

	return true
}

asset function GetImageFromMiniIconMap( string keyName )
{
	asset imageAsset = $"rui/menu/lobby/settings_icon"
	if ( keyName != "" )
	{
		if ( keyName in GAMEMODE_MINI_ICON_MAP )
			imageAsset = GAMEMODE_MINI_ICON_MAP[keyName]
		else
			Warning( "Invalid mini icon value for 'mini_icon': %s", keyName )
	}
	return imageAsset
}

asset function GetImageFromImageMap( string keyName )
{
	asset imageAsset = $"white"
	if ( keyName != "" )
	{
		if ( keyName in GAMEMODE_IMAGE_MAP )
			imageAsset = GAMEMODE_IMAGE_MAP[keyName]
		else
			Warning( "Invalid playlist value for 'image': %s", keyName )
	}
	return imageAsset
}

asset function GetBinkFromBinkMap( string keyName )
{
	asset desiredVideoAsset = $""
	if ( keyName != "" )
	{
		if ( keyName in GAMEMODE_BINK_MAP )
			desiredVideoAsset = GAMEMODE_BINK_MAP[keyName]
		else
			Warning( "Invalid playlist value for 'video': %s", keyName )
	}
	return desiredVideoAsset
}
#endif


#if CLIENT || UI 
int function GetPlaylistIndexForName( PlaylistName playlistName )
{
	if ( playlistName in file.cachedPlaylistMap )
		return file.cachedPlaylistMap[playlistName].index

	return -1
}
#endif


#if CLIENT || UI 
PlaylistScheduleData function Playlist_GetScheduleData( string plName )
{
	if ( plName in file.cachedPlaylistMap )
	{
		//
		if ( file.cachedPlaylistMap[plName].playlistSchedule.currentBlock == null && file.cachedPlaylistMap[plName].playlistSchedule.nextBlock == null )
			return file.cachedPlaylistMap[plName].playlistSchedule

		if ( file.cachedPlaylistMap[plName].playlistSchedule.currentBlock != null )
		{
			//
			TimestampRange currentBlock = expect TimestampRange( file.cachedPlaylistMap[plName].playlistSchedule.currentBlock )
			if ( currentBlock.endUnixTime > GetUnixTimestamp() )
				return file.cachedPlaylistMap[plName].playlistSchedule	//
		}

		if ( file.cachedPlaylistMap[plName].playlistSchedule.nextBlock != null )
		{
			//
			TimestampRange nextBlock = expect TimestampRange( file.cachedPlaylistMap[plName].playlistSchedule.nextBlock )
			if ( nextBlock.startUnixTime > GetUnixTimestamp() )
				return file.cachedPlaylistMap[plName].playlistSchedule	//
		}

		file.cachedPlaylistMap[plName].playlistSchedule = Playlist_GetNonCachedScheduleData( plName )
		return file.cachedPlaylistMap[plName].playlistSchedule	//
	}

	return Playlist_GetNonCachedScheduleData( plName )
}

PlaylistScheduleData function Playlist_GetNonCachedScheduleData( string plName )
{
	PlaylistScheduleData data

	int utNow = GetUnixTimestamp()
	const int MAX_SCHEDULE_BLOCKS_PER_PLAYLIST = 5
	for ( int blockIdx = 0; blockIdx < MAX_SCHEDULE_BLOCKS_PER_PLAYLIST + 1; ++blockIdx )
	{
		//
		string varName = format( "visible_schedule_block_%d", blockIdx )
		string varVal  = GetPlaylistVarString( plName, varName, "" )
		if ( varVal.len() == 0 )
		{
			continue
		}
		else if ( blockIdx >= MAX_SCHEDULE_BLOCKS_PER_PLAYLIST )
		{
			Assert( false, format( "Only %d visible blocks are supported per playlist, but we tried to specify more for playlist '%s': \"%s\" \"^s\"", MAX_SCHEDULE_BLOCKS_PER_PLAYLIST, plName, varName, varVal ) )
			break
		}

		array<string> fields = GetTrimmedSplitString( varVal, "|" )

		int ornull startTime = null
		int ornull endTime   = null

		if ( fields.len() == 1 )
		{
			if ( !IsValidItemFlavorHumanReadableRef( fields[0] ) )
			{
				Assert( false, format( "Bad itemflavor in playlist '%s' for setting '%s': '%s'", plName, varName, fields[0] ) )
				break
			}

			ItemFlavor calEvent = GetItemFlavorByHumanReadableRef( fields[0] )
			Assert( ItemFlavor_GetType( calEvent ) > eItemType._CALEVENT_RANGE_START && ItemFlavor_GetType( calEvent ) < eItemType._CALEVENT_RANGE_END )

			startTime = CalEvent_GetStartUnixTime( calEvent )
			endTime = CalEvent_GetFinishUnixTime( calEvent )
		}
		else
		{
			if ( fields.len() != 2 )
			{
				Assert( false, format( "Bad format in playlist '%s' for setting '%s': '%s'", plName, varName, varVal ) )
				break
			}

			startTime = DateTimeStringToUnixTimestamp( fields[0] )
			endTime = DateTimeStringToUnixTimestamp( fields[1] )
		}

		if ( startTime == null || endTime == null )
		{
			Assert( false, format( "Bad format in playlist '%s' for setting '%s': '%s'", plName, varName, varVal ) )
			break
		}

		TimestampRange block
		block.startUnixTime = expect int( startTime )
		block.endUnixTime = expect int( endTime )

		#if(ASSERTING)
			Assert( block.startUnixTime < block.endUnixTime, format( "Bad times in playlist '%s' for setting '%s': '%s'", plName, varName, varVal ) )
			foreach ( TimestampRange otherBlock in data.blocks )
			{
				Assert( block.endUnixTime < otherBlock.startUnixTime || otherBlock.endUnixTime < block.startUnixTime,
					format( "Playlist '%s' has two visible schedule blocks that overlap. One of them is: \"%s\" \"%s\"", plName, varName, varVal ) )
			}
		#endif

		data.blocks.append( block )


		if ( utNow >= block.startUnixTime && utNow < block.endUnixTime )
		{
			Assert( data.currentBlock == null, format( "Playlist '%s' has two visible schedule blocks that overlap. One of them is: \"%s\" \"%s\"", plName, varName, varVal ) )
			data.currentBlock = block
		}
		else if ( block.startUnixTime > utNow )
		{
			if ( data.nextBlock == null || block.startUnixTime < (expect TimestampRange(data.nextBlock)).startUnixTime )
				data.nextBlock = block
		}
	}

	return data
}
#endif


#if CLIENT || UI 
bool function PlaylistShouldBeHiddenForScheduleBlocks( string plName )
{
	PlaylistScheduleData scheduleData = Playlist_GetScheduleData( plName )
	if ( scheduleData.blocks.len() > 0 )
	{
		if ( scheduleData.currentBlock == null )
			return true

		TimestampRange currentBlock = expect TimestampRange( scheduleData.currentBlock )
		if ( currentBlock.startUnixTime > GetUnixTimestamp() || currentBlock.endUnixTime < GetUnixTimestamp() )
			return true
	}

	return false
}
#endif


#if CLIENT || UI 
void function ShPlaylist_Init()
{
	#if(false)




#endif

	ShPlaylist_CacheData()
}

void function ShPlaylist_CacheData()
{
	PrintFunc()
	file.cachedPlaylistArray = []
	file.cachedPlaylistMap = {}

	int numPlaylists = GetPlaylistCount()
	file.cachedPlaylistArray.resize( numPlaylists )

	for ( int index = 0; index < numPlaylists; index++ )
	{
		CachedPlaylistData playlistData
		string name = string( GetPlaylistName( index ) )

		playlistData.name = string( GetPlaylistName( index ) )
		playlistData.index = index
		playlistData.visible = GetPlaylistVarBool( name, "visible", false )
		playlistData.hubOnly = GetPlaylistVarBool( name, "hub_only", false )
		playlistData.optInOnly = GetPlaylistVarBool( name, "opt_in_only", false )
		playlistData.isPvEOnly = GetPlaylistVarBool( name, "pve_only", false )
		playlistData.isPrivateMatchPlaylist = GetPlaylistVarBool( name, "private_match", false )
		playlistData.ui_slot = GetPlaylistVarString( name, "ui_slot", "" )
		playlistData.rotationGroup = GetPlaylistVarString( name, "playlist_rotation_group", "" )

		playlistData.playlistSchedule = Playlist_GetScheduleData( name )

		file.cachedPlaylistArray[index] = playlistData
		file.cachedPlaylistMap[name] <- playlistData
	}
}

#if(false)




//





#endif

array<string> function GetPlaylistModNames()
{
	array<string> list = []
	int numMods = GetPlaylistModCount()

	list.resize( numMods )
	for ( int modIter = 0; modIter != numMods; modIter++ )
		list[modIter] = string( GetPlaylistModName( modIter ) )

	return list
}

array<string> function GetVisiblePlaylistNames( bool isPrivateMatchQuery = false )
{
	if ( GetPlaylistCount() != file.cachedPlaylistArray.len() )
		Warning( "Playlist count mismatch: cache (%d) != actual (%d)", file.cachedPlaylistArray.len(), GetPlaylistCount() )

	string forcedVisiblePlaylistsString  = GetConVarString( "match_visiblePlaylists" )
	array<string> forcedVisiblePlaylists = split( forcedVisiblePlaylistsString, " " )

	array<string> list      = []
	array<string> optInList = []
	for ( int i = 0; i < file.cachedPlaylistArray.len(); i++ )
	{
		CachedPlaylistData playlistData = file.cachedPlaylistArray[i]

		if ( forcedVisiblePlaylists.contains( playlistData.name ) )
		{
			list.append( playlistData.name )
			continue
		}

		if ( !playlistData.visible )
			continue
		if ( playlistData.hubOnly )
			continue
		if ( playlistData.isPvEOnly )    //
			continue
		if ( playlistData.isPrivateMatchPlaylist && !isPrivateMatchQuery )
			continue
		if ( !playlistData.isPrivateMatchPlaylist && isPrivateMatchQuery )
			continue

		if ( playlistData.rotationGroup != GetPlaylistRotationGroup() && playlistData.rotationGroup != "" )
			continue

		if ( PlaylistShouldBeHiddenForScheduleBlocks( playlistData.name ) )
			continue

		if ( playlistData.optInOnly )
		{
			#if(UI)
				if ( ShouldDisplayOptInOptions() )
				{
					if ( uiGlobal.isOptInEnabled )
						optInList.append( playlistData.name )
				}
			#endif //
			continue
		}

		list.append( playlistData.name )
	}

	array<string> finalList = []

	if ( forcedVisiblePlaylists.len() > 0 )
	{
		foreach ( string name in list )
		{
			if ( !forcedVisiblePlaylists.contains( name ) )
				continue

			finalList.append( name )
		}
	}

	if ( finalList.len() == 0 )
		finalList = list

	finalList.extend( optInList )
	return finalList
}
#endif


#if CLIENT || UI 
string function Playlist_GetLTMSlotPlaylist( bool isPrivateMatchQuery = false )
{
	array<string> plNames = GetVisiblePlaylistNames( isPrivateMatchQuery )
	foreach ( plName in plNames )
	{
		if ( file.cachedPlaylistMap[plName].ui_slot == "ltm" )
			return plName
	}

	return ""
}

int function Playlist_GetNewModeVersion()
{
	return GetCurrentPlaylistVarInt( "newModeVersion", 0 )
}
#endif


#if CLIENT || UI 
const table<string, asset> GAMEMODE_EMBLEM_MAP = {
	airdrop = $"rui/menu/gamemode_emblem/airdrop_takeover",
	shotguns_and_snipers = $"rui/menu/gamemode_emblem/shotguns_and_snipers",
	jan_event = $"rui/menu/gamemode_emblem/sioree",
	deja_loot = $"rui/menu/gamemode_emblem/deja_loot",
                  
		shadowfall = $"rui/menu/gamemode_emblem/shadowfall",
       

                               
		shadow_royale = $"rui/menu/gamemode_emblem/shadow_royale",
       

	duos = $"rui/menu/gamemode_emblem/duos",
                       
		winter_express = $"rui/menu/gamemode_emblem/winter_express",
       
                           
                                                                             
                                                                   
                                                                             
                                                                       
                                                                       
                                                                           
                                                                       
       
                               
                                                            
       
	lost_treasures = $"rui/menu/gamemode_emblem/campfire_lost_treasures",
                              
		ace_takeover = $"rui/menu/gamemode_emblem/ace_takeover",
       
	generic = $"rui/menu/gamemode_emblem/generic_ltm"
}
#endif


#if CLIENT || UI 
asset function GetModeEmblemImage( string playlistName )
{
	string emblemKey  = GetPlaylistVarString( playlistName, "emblem", "" )
	asset emblemImage = $""

	if ( emblemKey != "" )
	{
		if ( emblemKey in GAMEMODE_EMBLEM_MAP )
			emblemImage = GAMEMODE_EMBLEM_MAP[emblemKey]
		else
			Warning( "Playlist '%s' has invalid value for 'emblem': %s", playlistName, emblemKey )
	}

	return emblemImage
}
#endif


#if(UI)
array<int> function GetEmblemColor( string playlistName )
{
	string colorString = GetPlaylistVarString( playlistName, "emblem_color", "128 128 128 255" )
	return ColorStringToArray( colorString )
}
#endif

#if(DEV)
//
const DEV_SecondsPerRotation = 3600
#endif

#if CLIENT || UI 
string function GetPlaylistRotationGroup()
{
	string rotationGroup = GetConVarString( "playlist_rotationGroup" )
	#if(DEV)
		if ( rotationGroup == "" )
		{
			//
			//
			if ( GetUnixTimestamp() % (DEV_SecondsPerRotation * 2) < DEV_SecondsPerRotation )
				rotationGroup = "kings_canyon"
			else
				rotationGroup = "worlds_edge"
		}
	#endif
	return rotationGroup
}
#endif
#if(UI)
int function GetPlaylistRotationNextTime()
{
	//
	//
	int nextTime = int( GetConVarString( "playlist_rotationNextTime" ) )

	#if(DEV)
		if ( nextTime == 0 )
			nextTime = (GetUnixTimestamp() / DEV_SecondsPerRotation ) * DEV_SecondsPerRotation + DEV_SecondsPerRotation //
	#endif

	return nextTime
}
#endif
#if(UI)
string function GetPlaylistRotationNextTimeFormatedString()
{
	DisplayTime dt = SecondsToDHMS( GetPlaylistRotationNextTime() - GetUnixTimestamp() - 1 )
	string nextTimeStr

	if ( dt.days )
	{
		bool isDays = dt.days > 1
		bool isHours = dt.hours > 1

		string formatString
		if ( isDays && isHours )
			formatString = "#TIME_REMAINING_DAYS_HOURS"
		else if ( isDays && !isHours )
			formatString = dt.hours > 0 ? "#TIME_REMAINING_DAYS_HOUR" : "#TIME_REMAINING_DAYS"
		else if ( !isDays && isHours )
			formatString = "#TIME_REMAINING_DAY_HOURS"
		else
			formatString = dt.hours > 0 ? "#TIME_REMAINING_DAY_HOUR" : "#TIME_REMAINING_DAY"

		return Localize( formatString, string( dt.days ), string( dt.hours ) )
	}

	if ( dt.hours )
		return format( "%d:%02d:%02d", dt.hours, dt.minutes, max( dt.seconds, 0 ) )

	return format( "%d:%02d", dt.minutes, max( dt.seconds, 0 ) )
}
#endif
#if(UI)
array<string> function GetPlaylistsInCurrentRotationGroup()
{
	array<string> visiblePlaylists = GetVisiblePlaylistNames()
	array<string> list

	for ( int i = 0; i < visiblePlaylists.len(); i++ )
	{
		string playlistName = visiblePlaylists[i]
		string rotationGroup = GetPlaylistVarString( playlistName, "playlist_rotation_group", "" )

		if ( rotationGroup == GetPlaylistRotationGroup() )
			list.append( playlistName )
	}

	return list
}
#endif
#if(UI)
string function GetPanelImageKeyForCurrentRotationGroup()
{
	array<string> list = GetPlaylistsInCurrentRotationGroup()
	if ( !list.len() )
		return ""

	string panelImageKey = GetPlaylistVarString( list[0], "panel_image", "" )
	return panelImageKey
}
#endif
#if(UI)
string function GetMapDisplayNameForCurrentRotationGroup()
{
	array<string> list = GetPlaylistsInCurrentRotationGroup()
	if ( !list.len() )
		return ""

	string rotationMapName = GetPlaylistVarString( list[0], "map_name", "bug this!" )
	return rotationMapName
}
#endif
#if(UI)
string function GetCurrentPlaylistInUiSlot( string uiSlot )
{
	array<string> playlistNames = GetPlaylistsInCurrentRotationGroup()
	foreach( playlist in playlistNames )
	{
		if ( GetPlaylistVarString( playlist, "ui_slot", "" ) == uiSlot )
			return playlist
	}

	return ""
}
#endif
#if(UI)
bool function PlaylistHasRotationGroup( string playlistName )
{
	string rotationGroup = GetPlaylistVarString( playlistName, "playlist_rotation_group", "" )
	return rotationGroup != ""
}
#endif
#if(UI)
string function GetDefaultPlaylist()
{
	array<string> list = GetVisiblePlaylistNames()
	Assert( list.len() > 0 )

	if ( GetPartySize() == 1 && !IsExemptFromTraining() && !IsTrainingCompleted() )
		return PLAYLIST_TRAINING

	foreach ( playlist in list )
	{
		if ( GamemodeSelectV2_PlaylistIsDefaultSlot( playlist ) || GamemodeSelectV3_PlaylistIsDefaultSlot( playlist ) && Lobby_IsPlaylistAvailable( playlist ) )
		{
			return playlist
			break
		}
	}

	foreach ( playlist in list )
	{
		if ( playlist == PLAYLIST_TRAINING )
			continue
		return playlist
	}

	unreachable
}
#endif
#if(UI)
bool function PartyHasPlaylistAccountLevelRequired( string playlistName )
{
	//

	if ( !IsFullyConnected() )
		return false

	int accountLevelRequired = GetPlaylistVarInt( playlistName, "account_level_required", 0 ) - 1 //
	if ( accountLevelRequired < 0 )
		return true

	Party party = GetParty()
	if ( party.members.len() == 0 )
	{
		if ( IsPersistenceAvailable() )
			return GetAccountLevelForXP( GetPersistentVarAsInt( "xp" ) ) >= accountLevelRequired
		else
			return false
	}

	bool onePartyMembersMeetRankedLevelRequirement = false

	foreach ( member in party.members )
	{
		CommunityUserInfo ornull userInfoOrNull = GetUserInfo( member.hardware, member.uid )

		if ( userInfoOrNull != null )
		{
			CommunityUserInfo userInfo = expect CommunityUserInfo(userInfoOrNull)

			if ( userInfo.charData[ePlayerStryderCharDataArraySlots.ACCOUNT_LEVEL] >= accountLevelRequired )
			{
				onePartyMembersMeetRankedLevelRequirement = true
				break
			}
		}
	}

	return onePartyMembersMeetRankedLevelRequirement
}
#endif


//
//
//
//
//
#if ( CLIENT || UI ) && DEV 
void function PrintPlaylists()
{
	printt( "=== PLAYLIST NAMES: ===" )

	int count = GetPlaylistCount()
	for ( int idx = 0; idx < count; idx++ )
	{
		printt( "--", GetPlaylistName( idx ) )
	}
}
#endif


