global function Sh_ArenaDeathField_Init

#if(false)









#endif

#if(false)














































#endif

#if(CLIENT)
global function Cl_Deathfield_GetRadiusScale
global function Cl_Deathfield_GetFXIDForRadius
global function Cl_GetDeathFieldStage
global function Cl_SURVIVAL_GetDeathField
global function Cl_SURVIVAL_GetDeathFieldCurrentRadius
global function Cl_SURVIVAL_GetDeathFieldCenter
global function ServerCallback_Survival_PathfinderSurveyNotifications
global function ServerCallback_Survival_CreateBeaconWorldIcon
global function SURVIVAL_AddCallback_OnDeathFieldStartShrink
global function SURVIVAL_AddCallback_OnDeathFieldStopShrink
global function UpdateSurveyBeaconHint
#endif

global function HasDeathFieldImmunity
global function SURVIVAL_GetCurrentDeathFieldStage
global function SURVIVAL_GetCurrentRoundString
global function SURVIVAL_IsFinalDeathFieldStage
global function Survival_GetNumDeathfieldStages

global function AddCallback_OnSurvivalDeathFieldStageChanged
global function RemoveCallback_OnSurvivalDeathFieldStageChanged

                      
global function HasActiveSurveyZone
      

#if(CLIENT)
table < float, string > distanceToSound =
{
	[ 17000.0 ] = "Survival_Circle_Edge_Large",
	[ 4000.0 ] = "Survival_Circle_Edge_Medium",
	[ 0.0 ] = "Survival_Circle_Edge_Small",
}
#endif

const asset DEATHFIELD_EFFECT = $"P_ring_FP_hit_01"
const string COLOR_CORRECTION = "materials/correction/outside_ring.raw_hdr"

const string DESIGNER_PLACED_CIRCLE_END_SCRIPT_NAME = "circle_end_location_override"
const string DESIGNER_PLACED_CIRCLE_END_RADIUS_NAME = "selection_radius"

global const float REALBIG_CIRCLE_END_RADIUS = 85000
global const float REALBIG_CIRCLE_END_RADIUS_SQ = REALBIG_CIRCLE_END_RADIUS * REALBIG_CIRCLE_END_RADIUS

global const float REALBIG_CIRCLE_END_RADIUS_SMALL_INNER = 30000
global const float REALBIG_CIRCLE_END_RADIUS_SMALL_OUTER = 40000

global const float DEATHFIELD_DAMAGE_CHECK_STEP_TIME = 1.5
global const string FINAL_ROUND_ALIAS_SUFFIX = "Final"

global enum ePathfinderNotifications
{
	TEAM_SUCCESS
	NOT_PATHFINDER
	ALREADY_USED
	ALREADY_ACTIVE
}

const float START_WAIT_TIME = 5.0
const float MARGIN_WAIT_TIME = 5.0
const asset SURVEY_BEACON_MODEL = $"mdl/props/pathfinder_beacon_radar/pathfinder_beacon_radar_animated.rmdl"
#if(DEV)
const string DUMMY_ZONE_WP_NAME = "dev_dummy_circle"
#endif

global struct DeathFieldData
{
	vector center = <0, 0, 0>
	vector nextCenter = <0, 0, 0>

	float currentRadius = 40000.0
	float startRadius = 40000.0
	float endRadius = 40000.0
	float startTime = 10.0
	float endTime = 30.0

	int codeIndex = 0
	float percentDamagePerTick = 0.2
	bool s_deathFieldSynchronized = false
}

global struct DeathFieldStageData
{
	float  endRadius
	float  shrinkDuration
	float  preShrinkDuration
	float  percentDamagePerTick = 0.2
	float  circleDeviation = 1.0
	float  minimapZoomScale = -1.0

	#if(false)

#endif
}

#if(false)





#endif

struct SurveyBeaconData
{
	int passiveSource
	bool functionref( entity, entity  ) canUseFunc
	void functionref( entity, entity ) successFunc
	string calloutLine

	#if(false)

#endif
}

struct
{
	#if(false)




















#endif

	table< entity, SurveyBeaconData > surveyBeaconData

	array<DeathFieldStageData> deathFieldStageData

	float					   overrideStartRadius = -1
	array<float>			   deathFieldStagesOverrideRadius
	array<float>			   deathFieldStagesOverrideMinimapZoom
	int                        deathFieldStartStage
	array<entity>              surveyMinimapEnts
	array<entity>              surveyBeacons

	#if(CLIENT)
		entity deathField
		entity safeZone
		array< void functionref ( DeathFieldStageData ) > ClientCallbacks_OnDeathFieldStartShrink
		array< void functionref ( DeathFieldStageData ) > ClientCallbacks_OnDeathFieldStopShrink
		table<entity, var>                                pathfinderWorldIcons
		int                                               colorCorrection
		float                                             nextHolsterHintTime
	#endif

	array<void functionref( int stage, float nextCircleStartTime )> onSurvivalDeathFieldStageChangedCallbacks

	bool usePreciseRingFx
} file

void function Sh_ArenaDeathField_Init()
{
	PrecacheParticleSystem( $"P_survival_radius_CP_1x1" )
	PrecacheParticleSystem( $"P_survival_radius_CP_1x5" )
	PrecacheParticleSystem( $"P_survival_radius_CP_1x100" )

	PrecacheParticleSystem( $"P_survival_radius_CP_1k_x_1k" )
	PrecacheParticleSystem( $"P_survival_radius_CP_1k_x_5k" )
	PrecacheParticleSystem( $"P_survival_radius_CP_1k_x_100k" )

	AddCallback_OnPassiveChanged( ePassives.PAS_PATHFINDER, Pathfinder_PassiveChanged )
                       
		AddCallback_OnPassiveChanged( ePassives.PAS_TRACKING_VISION, Bloodhound_PassiveChanged )
		AddCallback_OnPassiveChanged( ePassives.PAS_CRYPTO, Crypto_PassiveChanged )
       

              
                                                                          
       

             
                                                                        
       

               
                                                                            
       
	
	file.usePreciseRingFx = GetCurrentPlaylistVarBool( "deathfield_usePreciseRingFx", true )

	PrecacheParticleSystem( $"P_ring_FP_hit_01" )

	RegisterSignal( "NewDeathFieldStarting" )

	#if(false)

















//



#endif

	InitDeathFieldDataAndStageData()

	#if(CLIENT)
		file.colorCorrection = ColorCorrection_Register( COLOR_CORRECTION )

		AddCreateCallback( "prop_script", OnPropScriptCreated )
		AddCreateCallback( "prop_dynamic", OnPropDynamicCreated )

		AddCreatePilotCockpitCallback( TrackDeathfieldDistance )
		AddLocalPlayerTookDamageTypeCallback( eDamageSourceId.deathField, Callback_OnPlayerTakeDeathFieldDamage )
		#if(DEV)
			Waypoints_RegisterCustomType( DUMMY_ZONE_WP_NAME, DEV_OnDummyCircleWpInstanced )
		#endif

	#endif
}


void function GenerateDeathFieldStageData()
{
	file.deathFieldStageData.clear()

	int i = 0
	while ( 1 )
	{
		float radius = GetCurrentPlaylistVarFloat( "deathfield_radius_" + i, -1.0 )

		bool allowMissingDefaults = false
		if ( radius < 0 )
		{
			if ( file.deathFieldStageData.len() > 0 )
			{
				break
			}
			else
			{
				Warning( "Survival deathfield playlist vars are missing!" )
				allowMissingDefaults = true
			}
		}

		file.deathFieldStageData.append( CreateDeathFieldStageData( i++, allowMissingDefaults ) )
	}
}


DeathFieldStageData function CreateDeathFieldStageData( int index, bool allowMissingDefaults )
{
	float lastRadius = GetStartRadius()

	if ( file.deathFieldStageData.len() > 0 )
	{
		lastRadius = file.deathFieldStageData[ file.deathFieldStageData.len() - 1 ].endRadius
	}

	bool circleDebug = GetBugReproNum() == 1001

	int currentIndex = file.deathFieldStageData.len()

	float defaultSpeed     = GetCurrentPlaylistVarFloat( "deathfield_default_shrinkSpeed", 140.0 )
	float shrinkSpeed      = GetCurrentPlaylistVarFloat( "deathfield_shrinkSpeed_" + index, -1.0 )
	float circleCloseSpeed = shrinkSpeed > 0 ? shrinkSpeed : defaultSpeed //

	DeathFieldStageData data
	data.circleDeviation = GetCurrentPlaylistVarFloat( "deathfield_circleDeviation_" + index, 1.0 )

	if( index < file.deathFieldStagesOverrideRadius.len() )
		data.endRadius = file.deathFieldStagesOverrideRadius[ index ]
	else
		data.endRadius = GetCurrentPlaylistVarFloat( "deathfield_radius_" + index, allowMissingDefaults ? 20000.0 : -1.0 )

	if( index < file.deathFieldStagesOverrideMinimapZoom.len() )
		data.minimapZoomScale = file.deathFieldStagesOverrideMinimapZoom[ index ]
	else if( data.endRadius <= 600 )
		data.minimapZoomScale = 0.1
	else if ( data.endRadius <= 1000 )
		data.minimapZoomScale = 0.7
	else if ( data.endRadius <= 2000 )
		data.minimapZoomScale = 1.5
	else if ( data.endRadius <= 5000 )
		data.minimapZoomScale =  3.0

	data.preShrinkDuration = GetCurrentPlaylistVarFloat( "deathfield_preShrinkDuration_" + index, allowMissingDefaults ? 240.0 : -1.0 )
	data.shrinkDuration = ((lastRadius - data.endRadius) / circleCloseSpeed)
	data.percentDamagePerTick = GetCurrentPlaylistVarFloat( "deathfield_damagePercent_" + index, allowMissingDefaults ? 0.01 : -1.0 )

	Assert( data.endRadius > 0 )
	Assert( data.preShrinkDuration > 0 )
	Assert( data.shrinkDuration > 0 )
	Assert( data.percentDamagePerTick >= 0 )

	if ( circleDebug )
	{
		data.preShrinkDuration = 10.0
	}

	return data
}


void function InitDeathFieldDataAndStageData()
{
	file.deathFieldStartStage = 0

	GenerateDeathFieldStageData()

	file.deathFieldStartStage = GetCurrentPlaylistVarInt( "survival_death_field_start_stage", 0 )
	if ( file.deathFieldStartStage >= file.deathFieldStageData.len() )
		file.deathFieldStartStage = file.deathFieldStageData.len()
}


float function GetStartRadius()
{
	float startRadius = GetCurrentPlaylistVarFloat( "survival_death_field_start_radius", 65000 )

	if ( file.deathFieldStartStage > 0 )
	{
		startRadius = file.deathFieldStageData[file.deathFieldStartStage - 1].endRadius
	}
	else if (file.overrideStartRadius > 0)
	{
		startRadius = file.overrideStartRadius
	}

	return startRadius
}


bool function PlayerShouldSeeSurveyBeaconMarkers( entity player )
{
	return player in file.surveyBeaconData
}


#if(false)






























































































#endif //


#if(false)


























//


























































//

















//











//






































































//
















































































//





























































































//










































































//















//


















//



























//
//








































































































//




















































































































































































































//

















































































//











//





























//

































//































//










































//
//
//
//

//







//











//
























































//



//




//





//





//





//





































//

























































//









//









//











































































































































//
//











//





























//









//
































//



























































































































































































































































//





















//









































//






//



































































































//






























//































































































//






//











































































































































#endif //

#if(CLIENT)
void function SURVIVAL_AddCallback_OnDeathFieldStartShrink( void functionref( DeathFieldStageData ) callbackFunc )
{
	Assert( !file.ClientCallbacks_OnDeathFieldStartShrink.contains( callbackFunc ), "Already added " + string( callbackFunc ) + " with SURVIVAL_AddCallback_OnDeathFieldStartShrink" )
	file.ClientCallbacks_OnDeathFieldStartShrink.append( callbackFunc )
}

void function SURVIVAL_AddCallback_OnDeathFieldStopShrink( void functionref( DeathFieldStageData ) callbackFunc )
{
	Assert( !file.ClientCallbacks_OnDeathFieldStopShrink.contains( callbackFunc ), "Already added " + string( callbackFunc ) + " with SURVIVAL_AddCallback_OnDeathFieldStopShrink" )
	file.ClientCallbacks_OnDeathFieldStopShrink.append( callbackFunc )
}


void function UpdateSurveyBeaconHint()
{
	if ( GetCurrentPlaylistVarBool( "survey_beacons_enabled", true ) == false )
		return

	entity player = GetLocalViewPlayer()
	if ( !PlayerShouldSeeSurveyBeaconMarkers( player ) )
		RemoveMapFeatureItemByName( "#SURVEY_BEACON" )
	else
		SetMapFeatureItem( 100, "#SURVEY_BEACON", "#SURVEY_BEACON_DESC", $"rui/hud/gametype_icons/survival/survey_beacon_only_pathfinder" )
}


void function OnPropDynamicCreated( entity prop )
{
	string modelName = prop.GetModelName()
	if ( modelName == SURVEY_BEACON_MODEL )
	{
		CreateCallback_Panel( prop )
		ClearCallback_CanUseEntityCallback( prop )
		SetCallback_CanUseEntityCallback( prop, SurveyBeacon_CanUseFunction )
	}
	else if ( modelName == "mdl/fx/bb_shield.rmdl" )
	{
		Chroma_OnBubbleShieldCreated( prop )
	}
}

void function OnPropScriptCreated( entity prop )
{
	if ( prop.GetTargetName() == "surveyZone" )
	{
		file.surveyMinimapEnts.append( prop )
		AddEntityDestroyedCallback( prop, SurveyZoneCleanupOnDestroy )
	}

	if ( prop.GetTargetName() == "deathField" )
	{
		file.deathField = prop
		thread Cl_DeathFieldThink( prop )

		var gamestateRui = ClGameState_GetRui()
		array<var> ruis  = [gamestateRui]
		var cameraRui    = GetCameraCircleStatusRui()
		if ( IsValid( cameraRui ) )
			ruis.append( cameraRui )

		foreach ( rui in ruis )
		{
			RuiTrackFloat3( rui, "deathFieldOrigin", prop, RUI_TRACK_ABSORIGIN_FOLLOW )
		}
	}

	if ( (prop.GetTargetName() == "safeZone") || (prop.GetTargetName() == "safeZone_noline") )
	{
		file.safeZone = prop

		var gamestateRui = ClGameState_GetRui()
		array<var> ruis  = [gamestateRui]
		var cameraRui    = GetCameraCircleStatusRui()
		if ( IsValid( cameraRui ) )
			ruis.append( cameraRui )

		foreach ( rui in ruis )
		{
			RuiTrackFloat3( rui, "safeZoneOrigin", prop, RUI_TRACK_ABSORIGIN_FOLLOW )
		}
	}
}

void function SurveyZoneCleanupOnDestroy( entity surveyZoneEnt )
{
	file.surveyMinimapEnts.fastremovebyvalue( surveyZoneEnt )
}

int function Cl_Deathfield_GetFXIDForRadius( float radius )
{
	array<int> fxIdx     = [ GetParticleSystemIndex( $"P_survival_radius_CP_1x1" ), GetParticleSystemIndex( $"P_survival_radius_CP_1x5" ), GetParticleSystemIndex( $"P_survival_radius_CP_1x100" ) ]

	if ( file.usePreciseRingFx )
		fxIdx     = [ GetParticleSystemIndex( $"P_survival_radius_CP_1k_x_1k" ), GetParticleSystemIndex( $"P_survival_radius_CP_1k_x_5k" ), GetParticleSystemIndex( $"P_survival_radius_CP_1k_x_100k" ) ]

	int idealIdx
	if ( radius <= 3000 )
	{
		idealIdx = 2
	}
	else if ( radius <= 17000 )
	{
		idealIdx = 1
	}
	else
	{
		idealIdx = 0
	}

	return fxIdx[ idealIdx ]
}

void function Cl_DeathFieldThink( entity deathField )
{
	deathField.SetDoDestroyCallback( true )
	deathField.EndSignal( "OnDestroy" )

	int effectID = Cl_Deathfield_GetFXIDForRadius( 64000.0 )
	int ringFX   = StartParticleEffectOnEntity( deathField, effectID, FX_PATTACH_ABSORIGIN_FOLLOW, -1 )

	table<string, int> e
	e["fx"] <- ringFX

	entity deathfieldSoundEnt = CreateClientsideScriptMover( $"mdl/dev/empty_model.rmdl", deathField.GetOrigin(), <0, 0, 0> )

	OnThreadEnd(
		function() : ( e, deathfieldSoundEnt )
		{
			deathfieldSoundEnt.Destroy()
			EffectStop( e["fx"], true, true )
		}
	)

	string currentSoundPlaying = ""
	bool wasMoving             = false

	int currentDeathFieldStage = -1
	float lastStartTime        = 0.0
	float lastEndTime          = 0.0
	while ( 1 )
	{
		int dIndex 		= GetLocalViewPlayer().DeathFieldIndex()
		int stage       = SURVIVAL_GetCurrentDeathFieldStage()
		float startTime = GetGlobalNetTime( "nextCircleStartTime" ) + MARGIN_WAIT_TIME

		if ( currentDeathFieldStage != stage )
		{
			currentDeathFieldStage = stage
			foreach ( void functionref( int, float ) callback in file.onSurvivalDeathFieldStageChangedCallbacks )
				thread callback( currentDeathFieldStage, startTime )
		}

		DeathFieldStageData deathFieldData = file.deathFieldStageData[stage]

		float duration  = deathFieldData.shrinkDuration
		float unclampedFrac = (Time() - startTime) / duration
		float frac          = clamp( unclampedFrac, 0.0, 1.0 )
		float radius        = DeathField_GetRadiusForTime( Time(), dIndex )
		float radiusScale   = Cl_Deathfield_GetRadiusScale()

		if ( Time() >= startTime && lastStartTime < startTime )
		{
			//

			//
			foreach ( void functionref( DeathFieldStageData ) callback in file.ClientCallbacks_OnDeathFieldStartShrink )
				callback( deathFieldData )

			lastStartTime = startTime
		}

		if ( Time() >= (startTime + duration) && (startTime + duration) != lastEndTime )
		{
			//
			//
			foreach ( void functionref( DeathFieldStageData ) callback in file.ClientCallbacks_OnDeathFieldStopShrink )
				callback( deathFieldData )

			lastEndTime = (startTime + duration)
		}

		int idealFx = Cl_Deathfield_GetFXIDForRadius( radius )
		if ( idealFx != effectID )
		{
			effectID = idealFx
			EffectStop( e["fx"], true, true )
			ringFX = StartParticleEffectOnEntity( deathField, effectID, FX_PATTACH_ABSORIGIN_FOLLOW, -1 )
			e["fx"] = ringFX
		}

		entity player        = GetLocalViewPlayer()
		vector fwdToPlayer   = Normalize( <player.GetOrigin().x, player.GetOrigin().y, 0> - <deathField.GetOrigin().x, deathField.GetOrigin().y, 0> )
		vector circleEdgePos = deathField.GetOrigin() + (fwdToPlayer * radius)
		circleEdgePos.z = player.EyePosition().z

		if ( PositionIsInMapBounds( circleEdgePos ) )
		{
			deathfieldSoundEnt.SetOrigin( circleEdgePos )
			string soundToPlay = GetCircleSoundForSize( radius )

			bool moving = unclampedFrac == frac

			if ( moving )
				soundToPlay = soundToPlay + "_Movement"

			if ( (!moving || currentSoundPlaying == "" || wasMoving != moving) && currentSoundPlaying != soundToPlay )
			{
				if ( currentSoundPlaying != "" )
					StopSoundOnEntity( deathfieldSoundEnt, currentSoundPlaying )
				if ( soundToPlay != "" )
					EmitSoundOnEntity( deathfieldSoundEnt, soundToPlay )

				currentSoundPlaying = soundToPlay
				wasMoving = moving
			}
		}

		Minimap_SetDeathFieldRadius( radius )
		FullMap_SetDeathFieldRadius( radius )
		EffectSetControlPointVector( e["fx"], 1, <radius / radiusScale, 0, 0> )
		WaitFrame()
	}
}

float function Cl_Deathfield_GetRadiusScale()
{
	return file.usePreciseRingFx ? 1000.0 : 1.0
}

string function GetCircleSoundForSize( float radius )
{
	foreach ( distance, sound in distanceToSound )
	{
		if ( distance < radius )
		{
			return sound
		}
	}

	return ""
}

void function ServerCallback_Survival_PathfinderSurveyNotifications( entity beacon, int notificationNumber )
{
	switch ( notificationNumber )
	{
		case ePathfinderNotifications.TEAM_SUCCESS:
			//
                      
			entity localViewPlayer = GetLocalViewPlayer()
			if ( IsValid( localViewPlayer ) && PlayerHasPassive( localViewPlayer, ePassives.PAS_PATHFINDER ) )
				AddPlayerHint( 2.5, 0.25, $"rui/hud/ultimate_icons/ultimate_pathfinder", "#SURVEY_PATHFINDER_SUCCESS" )
      
			foreach ( beaconEnt, rui in file.pathfinderWorldIcons )
			{
				if ( beaconEnt == beacon )
					RuiDestroyIfAlive( rui )
			}
			break

		case ePathfinderNotifications.NOT_PATHFINDER:
			AddPlayerHint( 1.25, 0.25, $"rui/hud/gametype_icons/survival/survey_beacon_only_pathfinder", "#SURVEY_NOT_PATHFINDER" )
			break

		case ePathfinderNotifications.ALREADY_ACTIVE:
			AddPlayerHint( 1.25, 0.25, $"rui/hud/gametype_icons/survival/survey_beacon_only_pathfinder", "#SURVEY_ALREADY_ACTIVE" )
			break

		case ePathfinderNotifications.ALREADY_USED:
			AddPlayerHint( 1.25, 0.25, $"rui/hud/gametype_icons/survival/survey_beacon_only_pathfinder", "#SURVEY_ALREADY_USED" )
			break
	}
}
void function ServerCallback_Survival_CreateBeaconWorldIcon( entity beacon, entity minimapObj )
{
	if ( !IsValid( minimapObj ) )
		return

	if ( !IsValid( beacon ) )
		return

	switch ( minimapObj.GetTargetName() )
	{
		case "SurveyBeacon":
			if ( beacon in file.pathfinderWorldIcons )
				return
			file.pathfinderWorldIcons[beacon] <- SurveyBeacon_CreateHUDMarker( $"rui/hud/gametype_icons/survival/survey_beacon_only_pathfinder", minimapObj )
			break
	}
}

var function SurveyBeacon_CreateHUDMarker( asset beaconImage, entity minimapObj )
{
	entity localViewPlayer = GetLocalViewPlayer()
	vector pos             = minimapObj.GetOrigin() + (minimapObj.GetUpVector() * 96)
	var rui                = CreateCockpitRui( $"ui/survey_beacon_marker_icon.rpak", RuiCalculateDistanceSortKey( localViewPlayer.EyePosition(), pos ) )
	RuiSetImage( rui, "beaconImage", beaconImage )
	RuiSetGameTime( rui, "startTime", Time() )
	RuiSetFloat3( rui, "pos", pos )
	RuiKeepSortKeyUpdated( rui, true, "pos" )
	return rui
}

#if(DEV)
void function DEV_OnDummyCircleWpInstanced( entity wp )
{
	float startTime = wp.GetWaypointFloat( 0 )
	float endTime = wp.GetWaypointFloat( 1 )
	float endRadius = float( wp.GetWaypointInt( 0 ) )

                       
                                                                     
       
}
#endif //
#endif //

int function SURVIVAL_GetCurrentDeathFieldStage()
{
	return GetGlobalNetInt( "currentDeathFieldStage" )
}


string function SURVIVAL_GetCurrentRoundString()
{
	int curStage = SURVIVAL_GetCurrentDeathFieldStage()

	//
	//
	if ( SURVIVAL_IsFinalDeathFieldStage() )
		return FINAL_ROUND_ALIAS_SUFFIX
	else
		return string( curStage + 1 )

	unreachable
}


bool function SURVIVAL_IsFinalDeathFieldStage()
{
	int curStage = SURVIVAL_GetCurrentDeathFieldStage()

	return (curStage >= file.deathFieldStageData.len() - 1)
}


void function AddCallback_OnSurvivalDeathFieldStageChanged( void functionref( int stage, float nextCircleStartTime ) callback )
{
	Assert( !file.onSurvivalDeathFieldStageChangedCallbacks.contains( callback ), "Tried to add a callback that was already added" )

	file.onSurvivalDeathFieldStageChangedCallbacks.append( callback )
}


void function RemoveCallback_OnSurvivalDeathFieldStageChanged( void functionref( int stage, float nextCircleStartTime ) callback )
{
	Assert( file.onSurvivalDeathFieldStageChangedCallbacks.contains( callback ), "Tried to remove a callback that was not added" )

	file.onSurvivalDeathFieldStageChangedCallbacks.fastremovebyvalue( callback )
}


bool function SURVIVAL_DeathFieldIsValid( int realm )
{
	if ( realm in file.deathField )
		return IsValid( file.deathField[ realm ] )

	return false
}

#if(false)






#endif

bool function HasDeathFieldImmunity( entity player )
{
	return player.GetPlayerNetBool( "hasDeathFieldImmunity" )
}


#if(false)




#endif

#if(CLIENT)
vector function Cl_SURVIVAL_GetDeathFieldCenter()
{
	if ( IsValid( file.deathField ) )
		return file.deathField.GetOrigin()
	else
		return <0, 0, 0>

	unreachable
}
#endif


#if(CLIENT)
float function Cl_SURVIVAL_GetDeathFieldCurrentRadius()
{
		float startRadius = GetStartRadius()

		int i = SURVIVAL_GetCurrentDeathFieldStage()

		if ( i == -1 )
			return startRadius

		float startTime = GetGlobalNetTime( "nextCircleStartTime" ) + MARGIN_WAIT_TIME
		DeathFieldStageData data = file.deathFieldStageData[i]
		if ( i > 0 )
		{
			DeathFieldStageData prevData = file.deathFieldStageData[i - 1]
			startRadius = prevData.endRadius
		}

		float duration = data.shrinkDuration
		float endRadius = data.endRadius

		float frac = (Time() - startTime) / duration
		frac = clamp( frac, 0.0, 1.0 )
		return startRadius + ((endRadius - startRadius) * frac)
}
#endif

#if(false)




#endif


bool function SurveyBeacon_CanUseFunction( entity player, entity beacon )
{

	if ( GetGameState() < eGameState.Playing )
		return false

	if ( !PlayerShouldSeeSurveyBeaconMarkers( player ) )
	{
		#if(CLIENT)
			ShowSurveyBeaconTeamHint( player )
		#endif //

		return false
	}

	SurveyBeaconData data = file.surveyBeaconData[ player ]
	if ( data.canUseFunc != null )
	{
		if ( !data.canUseFunc( player, beacon ) )
		{
			return false
		}
	}

	if ( !ControlPanel_CanUseFunction( player, beacon ) )
		return false

	return true
}

             
                                                                
 
                                                   
  
             
                                                                                                                    
           
              
  

            
 
      

bool function Pathfinder_CanUseBeacon( entity player, entity beacon )
{
	if ( HasActiveSurveyZone( player ) )
	{
		#if(CLIENT)
			AddPlayerHint( 0.1, 0, $"rui/hud/gametype_icons/survival/survey_beacon_only_pathfinder", "#SURVEY_ALREADY_ACTIVE" )
		#endif //
		return false
	}

	return true
}

#if(CLIENT)
entity function GetTeamSurveyBeaconUser( int team )
{
	array<entity> teamArray = GetPlayerArrayOfTeam_AliveConnected( team )
	foreach ( teamMember in teamArray )
	{
		if ( PlayerHasPassive( teamMember, ePassives.PAS_PATHFINDER ) )
			return teamMember
	}
	return null
}


void function ShowSurveyBeaconTeamHint( entity player )
{
	entity beaconUser = GetTeamSurveyBeaconUser( player.GetTeam() )
	if ( !IsValid( beaconUser ) )
		return

	if ( HasActiveSurveyZone( beaconUser ) )
		AddPlayerHint( 0.1, 0, $"rui/hud/gametype_icons/survival/survey_beacon_only_pathfinder", "#SURVEY_ALREADY_ACTIVE" )
	else
		AddPlayerHint( 0.1, 0, $"rui/hud/gametype_icons/survival/survey_beacon_only_pathfinder", "#SURVEY_TEAM_MESSAGE" )
}
#endif //

bool function HasActiveSurveyZone( entity player )
{
	foreach ( surveyZone in file.surveyMinimapEnts )
	{
		if ( surveyZone.GetOwner() == player )
		{
			return true
		}
	}
	return false
}

#if(false)















































#endif //

#if(CLIENT)
void function TrackDeathfieldDistance( entity cockpit, entity player )
{
	thread TrackDeathfieldDistance_Internal( cockpit, player )
}


void function TrackDeathfieldDistance_Internal( entity cockpit, entity player )
{
	player.EndSignal( "OnDestroy" )
	cockpit.EndSignal( "OnDestroy" )

	bool wasShowingDeathFieldFx = false
	int screenFx

	OnThreadEnd(
		function() : ( screenFx, player )
		{
			//
			ColorCorrection_SetWeight( file.colorCorrection, 0.0 )
			Chroma_EnteredRing()

			if ( EffectDoesExist( screenFx ) )
			{
				EffectStop( screenFx, true, true )
			}
		}
	)

	ColorCorrection_SetExclusive( file.colorCorrection, true )

	while ( 1 )
	{
		bool shouldShowDeathFieldFx = ShouldShowDeathFieldEffects( player ) //

		if ( wasShowingDeathFieldFx != shouldShowDeathFieldFx )
		{
			if ( shouldShowDeathFieldFx )
			{
				Callback_OnPlayerEnteredDeathfield( player )

				if ( !EffectDoesExist( screenFx ) )
				{
					screenFx = StartParticleEffectOnEntity( cockpit, GetParticleSystemIndex( DEATHFIELD_EFFECT ), FX_PATTACH_ABSORIGIN_FOLLOW, -1 )
					EffectSetIsWithCockpit( screenFx, true )
				}

				ColorCorrection_SetWeight( file.colorCorrection, 1.0 )

				Chroma_LeftRing()
			}
			else
			{
				Callback_OnPlayerLeftDeathfield( player )

				if ( EffectDoesExist( screenFx ) )
				{
					EffectStop( screenFx, true, true )
				}

				ColorCorrection_SetWeight( file.colorCorrection, 0.0 )

				Chroma_EnteredRing()
			}
			wasShowingDeathFieldFx = shouldShowDeathFieldFx
		}

		WaitFrame()
	}
}


bool function ShouldShowDeathFieldEffects( entity player )
{
	bool shouldShow = true

	if ( !IsAlive( player ) )
		shouldShow = false

	if ( player.ContextAction_IsInVehicle() )
	{
		if ( DeathField_PointDistanceFromFrontier( player.EyePosition(), player.DeathFieldIndex() ) >= 0 )
			shouldShow = false

                                
			//
			if ( IsRingCollapseGameMode() && CL_RingCollapseMode_IsPositionInRingFissure( player.EyePosition() ) )
				shouldShow = true
        
	}
	else
	{
		if ( DeathField_PointDistanceFromFrontier( player.GetOrigin(), player.DeathFieldIndex() ) >= 0 )
			shouldShow = false

                                
			//
			if ( IsRingCollapseGameMode() && CL_RingCollapseMode_IsPositionInRingFissure( player.GetOrigin() ) )
				shouldShow = true
        
	}

	if ( IsViewingSquadSummary() || IsViewingDeathRecap() )
		shouldShow = false

                      
	if ( StatusEffect_GetSeverity( player, eStatusEffect.ring_immunity ) >= 1 )
		shouldShow = false
      

	//
	if ( HasDeathFieldImmunity( player ) )
		shouldShow = false

	return shouldShow
}


void function Callback_OnPlayerEnteredDeathfield( entity player )
{
	//
	printt( "Callback_OnPlayerEnteredDeathfield" )
}


void function Callback_OnPlayerLeftDeathfield( entity player )
{
	//
	printt( "Callback_OnPlayerLeftDeathfield" )
}


void function Callback_OnPlayerTakeDeathFieldDamage( float damage, vector damageOrigin, int damageType, int damageSourceId, entity attacker )
{
	thread DisplayHolsterWeaponHint()
}


void function DisplayHolsterWeaponHint()
{
	const HINT_DURATION = 5.0
	const HINT_FADEOUT = 0.5
	const HINT_FIRST_DELAY = 3.0
	const HINT_INTERVAL_TIME = HINT_DURATION + 10.0

	if ( Time() - file.nextHolsterHintTime < HINT_INTERVAL_TIME )
		return

	entity viewPlayer   = GetLocalViewPlayer()
	entity activeWeapon = viewPlayer.GetActiveWeapon( eActiveInventorySlot.mainHand )
	if ( !IsValid( activeWeapon ) )
		return

	if ( activeWeapon.GetWeaponType() != WT_DEFAULT )
		return

	if ( activeWeapon == viewPlayer.GetNormalWeapon( WEAPON_INVENTORY_SLOT_PRIMARY_2 ) )
		return

	if ( DeathField_PointDistanceFromFrontier( viewPlayer.GetOrigin(), viewPlayer.DeathFieldIndex() ) > 0 )
		return

	AddPlayerHint( HINT_DURATION, HINT_FADEOUT, $"", "#HINT_HOLSTER_WEAPON" )
	file.nextHolsterHintTime = Time() + HINT_INTERVAL_TIME
}

#endif

#if(false)




#endif

             
                                                                                           
 
                                            
                                      
        

                         
  
               
   
                                                                             
                                       

             



      
   
      
   
          

      
                                                   
   
  
 
      

                      
void function Crypto_PassiveChanged( entity player, int passive, bool didHave, bool nowHas )
{
	if ( nowHas != didHave )
	{
		RegisterSurveyBeaconData( player, passive, nowHas, "bc_surveyBeaconScanCrypto", "medium", "crypto", "medium" )
	}
}

void function Bloodhound_PassiveChanged( entity player, int passive, bool didHave, bool nowHas )
{
	if ( nowHas != didHave )
	{
		RegisterSurveyBeaconData( player, passive, nowHas, "bc_surveyBeaconScanBloodhound", "medium", "bloodhound", "medium" )
	}
}
      

            
                                                                                          
 
                         
  
                                                                                                                  
  
 

      

              
                                                                                            
 
                         
  
                                                                                                                
  
 
      

void function RegisterSurveyBeaconData( entity player, int passive, bool nowHas, string calloutLine, string player1pAnim, string player3pAnim, string panelAnim )
{
	if ( nowHas )
	{
		SurveyBeaconData data = SurveyBeacon_RegisterPlayer( player, passive, calloutLine )
		data.canUseFunc = Pathfinder_CanUseBeacon

		#if(false)


#endif
	}
	else
	{
		SurveyBeacon_DeregisterPlayer( player, passive )
	}
}

void function Pathfinder_PassiveChanged( entity player, int passive, bool didHave, bool nowHas )
{
	if ( nowHas != didHave )
	{
		RegisterSurveyBeaconData( player, passive, nowHas, "bc_pathfinder_passive", "pathfinder", "pathfinder", "pathfinder" )
	}
}

#if(false)














#endif

void function SurveyBeacon_DeregisterPlayer( entity player, int passive )
{
	if ( !( player in file.surveyBeaconData ) )
		return

	if ( file.surveyBeaconData[ player ].passiveSource == passive )
		delete file.surveyBeaconData[ player ]
}

SurveyBeaconData function SurveyBeacon_RegisterPlayer( entity player, int passive, string calloutLine = "" )
{
	SurveyBeaconData data
	data.calloutLine = calloutLine
	data.passiveSource = passive

	file.surveyBeaconData[ player ] <- data

	return data
}

#if(CLIENT)
entity function Cl_SURVIVAL_GetDeathField()
{
	return file.deathField
}

DeathFieldStageData function Cl_GetDeathFieldStage( int index )
{
	return file.deathFieldStageData[ index ]
}
#endif

int function Survival_GetNumDeathfieldStages()
{
	return file.deathFieldStageData.len()
}

#if(false)





















#endif