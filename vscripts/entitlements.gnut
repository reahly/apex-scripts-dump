global function Entitlements_LevelInit
global function Entitlement_GetEntitlementEnumVal
global function Entitlement_GetMenuTitleText

#if(UI)
global function Entitlement_GetSKUStoreTitle
global function Entitlement_GetSKUStoreDesc
global function Entitlement_GetSKUStoreLink
global function Entitlement_GetSKUStoreImage
global function Entitlement_GetSKUStoreApexCoinFlav
global function Entitlement_GetSKUStoreCalEvent
global function TryEntitlementMenus
global function UICodeCallback_GRXFirstPartyBundlePurchased
global function Entitlement_IsSKUBundleOwned
#endif

#if UI || CLIENT 
global function Entitlement_GetSKUStoreApexCoinAmount
global function Entitlement_GetSKUStoreApexCoinTierImage
global function Entitlement_GetSKUStoreApexCoinCardBaseImage

#endif

#if UI && DEV 
global function OpenEntitlementMenu
#endif
#if(false)



#endif

table<entity, bool> checkedPlayerRewardsSet = {}

global table<string, array< ItemFlavor > > eaAccessRewardRefs
global table<string, array< ItemFlavor > > psPlusRewardRefs

global table< int, table<ItemFlavor, array< ItemFlavor > > > entitlementRewardMap

global table<entity, bool> playersToCheckForUpgrade
global array< ItemFlavor > upgradableAccessRewardRefs

enum eEntitlementType
{
	FIRSTPARTY,
	TWITCH_PRIME,
	TWITCH_DROPS,
	_COUNT
}

void function Entitlements_LevelInit()
{
	entitlementRewardMap.clear()
	for ( int entitlementType = 0; entitlementType < eEntitlementType._COUNT; entitlementType++ )
	{
		entitlementRewardMap[entitlementType] <- {}
	}

	//
	//
	//
	//

	//
	//

	AddCallback_RegisterRootItemFlavors( void function() {
		array<asset> entitlementAssetArray = GetBaseItemFlavorsFromArray( "entitlements" )
		entitlementAssetArray.reverse() //
		foreach ( asset entitlementAsset in entitlementAssetArray )
			RegisterItemFlavorFromSettingsAsset( entitlementAsset )

		foreach ( asset apexCoinAsset in GetBaseItemFlavorsFromArray( "apexCoinAmounts" ) )
			RegisterItemFlavorFromSettingsAsset( apexCoinAsset )
	} )

	AddCallback_OnItemFlavorRegistered( eItemType.character_skin, UnlockFuncRegister )
	AddCallback_OnItemFlavorRegistered( eItemType.weapon_skin, UnlockFuncRegister )
	AddCallback_OnItemFlavorRegistered( eItemType.gladiator_card_frame, UnlockFuncRegister )
	AddCallback_OnItemFlavorRegistered( eItemType.gladiator_card_badge, UnlockFuncRegister )

	AddCallback_OnItemFlavorRegistered( eItemType.entitlement, EntitlementRegister )

	#if(false)

#endif

	#if(CLIENT)
	Remote_RegisterServerFunction( "ClientCallback_MarkEntitlementMenuSeen", "string" )
	#endif

	#if(false)













//
//
//
//
//
//
//
//



//

































//

















//

























//







//


//







//




//

























#endif
}

#if(false)
































//



























































#endif


#if(false)






























//






#endif


#if CLIENT || UI 
void function UnlockFuncRegister( ItemFlavor flavor )
{
	if ( !ItemFlavor_HasUnlockFunc( flavor ) )
		return

	string unlockFuncKey = ItemFlavor_GetUnlockFuncKey( flavor )
	if ( unlockFuncKey in eaAccessRewardRefs )
		eaAccessRewardRefs[unlockFuncKey].append( flavor )
	else if ( unlockFuncKey in psPlusRewardRefs )
		psPlusRewardRefs[unlockFuncKey].append( flavor )
	else if ( unlockFuncKey == "origin_access_on_pc" || unlockFuncKey == "ea_access_on_xbox" )
		upgradableAccessRewardRefs.append( flavor )
}
#endif


#if CLIENT || UI 
int function Entitlement_GetEntitlementType( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.entitlement )

	string typeString = GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "entitlementType" )
	switch ( typeString )
	{
		case "firstparty":
			return eEntitlementType.FIRSTPARTY

		case "twitch_prime":
			return eEntitlementType.TWITCH_PRIME

		case "twitch_drops":
			return eEntitlementType.TWITCH_DROPS
	}

	Assert( false, "Unhandled entitlement type '" + typeString + "' for " + ItemFlavor_GetHumanReadableRef( flavor ) )
	return -1
}
#endif


#if CLIENT || UI 
int function Entitlement_GetEntitlementEnumVal( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.entitlement )

	string enumString = GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "enum" )

	Assert( enumString in getconsttable() )
	return expect int( getconsttable()[ enumString ] )
}
#endif


#if CLIENT || UI 
string function Entitlement_GetEntitlementEnumValAsString( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.entitlement )

	string enumString = GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "enum" )
	Assert( enumString != "" )

	return enumString
}
#endif


#if CLIENT || UI 
string function Entitlement_GetMenuTitleText( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.entitlement )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "menuTitleText" )
}
#endif

#if CLIENT || UI 
//
string function Entitlement_GetTwitchPrimeRef( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.entitlement )

	string twitchRef = GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "twitchRef" )
	Assert( twitchRef != "" )

	return twitchRef
}
#endif


#if CLIENT || UI 
string function Entitlement_GetMenuPersistenceVarName( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.entitlement )

	asset entitlementAsset = ItemFlavor_GetAsset( flavor )

	string persistenceVarName = GetGlobalSettingsString( entitlementAsset, "menuPersistenceVarName" )
	if ( persistenceVarName == "" )
	{
		switch ( Entitlement_GetEntitlementType( flavor ) )
		{
			case eEntitlementType.FIRSTPARTY:
				persistenceVarName = Entitlement_GetEntitlementEnumValAsString( flavor )
				break

			case eEntitlementType.TWITCH_PRIME:
				persistenceVarName = Entitlement_GetTwitchPrimeRef( flavor )
				break

			case eEntitlementType.TWITCH_DROPS:
				persistenceVarName = Entitlement_GetTwitchPrimeRef( flavor )
				break

			default:
				Assert( false, "Unhandled entitlement type for " + ItemFlavor_GetHumanReadableRef( flavor ) )
		}

		persistenceVarName += "Acknowledged"
	}

	return persistenceVarName
}
#endif


#if(UI)
string function Entitlement_GetSKUStoreTitle( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.entitlement )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "productTitle" )
}
#endif


#if(UI)
string function Entitlement_GetSKUStoreDesc( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.entitlement )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "productDesc" )
}
#endif


#if(UI)
string function Entitlement_GetSKUStoreLink( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.entitlement )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "productLink" )
}
#endif


#if(UI)
asset function Entitlement_GetSKUStoreImage( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.entitlement )
	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "productImage" )
}
#endif


#if(UI)
ItemFlavor ornull function Entitlement_GetSKUStoreApexCoinFlav( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.entitlement )
	asset coinsAsset = GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "apexCoinsFlavor" )
	if( IsValidItemFlavorSettingsAsset( coinsAsset ) )
		return GetItemFlavorByAsset( coinsAsset )

	return null
}
#endif


#if(UI)
ItemFlavor ornull function Entitlement_GetSKUStoreCalEvent( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.entitlement )
	asset calEventAsset = GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "productVisibilityCalEvent" )
	if ( IsValidItemFlavorSettingsAsset( calEventAsset ) )
		return GetItemFlavorByAsset( calEventAsset )

	return null
}
#endif


#if UI || CLIENT 
string function Entitlement_GetSKUStoreApexCoinAmount( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.apex_coins )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "apexCoinAmount" )
}
#endif


#if UI || CLIENT 
asset function Entitlement_GetSKUStoreApexCoinTierImage( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.apex_coins )
	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "apexCoinTierImage" )
}
#endif


#if UI || CLIENT 
asset function Entitlement_GetSKUStoreApexCoinCardBaseImage( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.apex_coins )
	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "apexCoinCardBaseImage" )
}
#endif


#if(UI)
void function UICodeCallback_GRXFirstPartyBundlePurchased( string bundleEnum )
{	
	printt( "Checking for first party purchase: " + bundleEnum )

	TabData lobbyTabData = GetTabDataForPanel( GetMenu( "LobbyMenu" ) )
	ActivateTab( lobbyTabData, Tab_GetTabIndexByBodyName( lobbyTabData, "PlayPanel" ) )

	foreach ( ItemFlavor entitlementFlav, array<ItemFlavor> itemList in (entitlementRewardMap[eEntitlementType.FIRSTPARTY]) )
	{
		if ( GetGlobalSettingsString( ItemFlavor_GetAsset( entitlementFlav ), "productLink" ) == bundleEnum )
		{
			bool hasAll = true

			foreach ( ItemFlavor flavor in itemList )
			{
				//
				if ( !GRX_HasItem( ItemFlavor_GetGRXIndex( flavor ) ) )
				{
					hasAll = false
					break
				}
			}

			if ( hasAll )
			{
				if ( IsPersistenceAvailable() )
				{
					string persistenceVarName = Entitlement_GetMenuPersistenceVarName( entitlementFlav )

					if ( GetDialogFlowTablesValueOrPersistence( persistenceVarName ) == false )
					{
						SetDialogFlowPersistenceTables( persistenceVarName, true )
						Remote_ServerCallFunction( "ClientCallback_MarkEntitlementMenuSeen", persistenceVarName )
						Remote_ServerCallFunction( "ClientCallback_lastSeenPremiumCurrency" )
						OpenEntitlementMenu( ItemFlavor_GetAsset( entitlementFlav ) )
						IncrementNumDialogFlowDialogsDisplayed()
					}
				}
			}
		}

	}
}
#endif

#if CLIENT || UI 
void function EntitlementRegister( ItemFlavor flavor )
{
	int entitlementType = Entitlement_GetEntitlementType( flavor )
	entitlementRewardMap[entitlementType][flavor] <- []
}
#endif


#if(false)












#endif


#if CLIENT || UI 
int function GetEntitlementForString( string entitlementString )
{
	Assert( entitlementString in getconsttable() )
	return expect int( getconsttable()[ entitlementString ] )
}
#endif


#if(false)








#endif


#if(UI)
bool function TryEntitlementMenus()
{
	Assert( IsPersistenceAvailable() )

	foreach ( ItemFlavor entitlementFlav in GetAllItemFlavorsOfType( eItemType.entitlement ) )
	{
		asset entitlementAsset = ItemFlavor_GetAsset( entitlementFlav )

		if ( !GetGlobalSettingsBool( entitlementAsset, "isMenuEnabled" ) )
			continue

		int entitlementType = Entitlement_GetEntitlementType( entitlementFlav )

		bool hasEntitlement = false
		if ( entitlementType == eEntitlementType.FIRSTPARTY )
			hasEntitlement = LocalPlayerHasEntitlement( Entitlement_GetEntitlementEnumVal( entitlementFlav ) )
		else if ( entitlementType == eEntitlementType.TWITCH_PRIME )
			hasEntitlement = DoesUserHaveTwitchPrimeReward( Entitlement_GetTwitchPrimeRef( entitlementFlav ) )
		else if ( entitlementType == eEntitlementType.TWITCH_DROPS )
			hasEntitlement = DoesUserHaveTwitchDrops( Entitlement_GetTwitchPrimeRef( entitlementFlav ) )
		else
			Assert( false, "Unknown entitlementType: " + entitlementType )

		string persistenceVarName = Entitlement_GetMenuPersistenceVarName( entitlementFlav )

		if ( hasEntitlement && GetDialogFlowTablesValueOrPersistence( persistenceVarName ) == false )
		{
			SetDialogFlowPersistenceTables( persistenceVarName, true )
			Remote_ServerCallFunction( "ClientCallback_MarkEntitlementMenuSeen", persistenceVarName )
			Remote_ServerCallFunction( "ClientCallback_lastSeenPremiumCurrency" )
			OpenEntitlementMenu( entitlementAsset )
			IncrementNumDialogFlowDialogsDisplayed()

			return true
		}
	}

	return false
}
#endif //

#if(UI)
bool function Entitlement_IsSKUBundleOwned( int bundleEnum, ItemFlavor bundleFlav )
{
	string persistenceVarName = Entitlement_GetMenuPersistenceVarName( bundleFlav )
	if ( GetPersistentVarAsInt( persistenceVarName ) )
		return true
	
	return LocalPlayerHasEntitlement( bundleEnum )
}
#endif //


#if(UI)
void function OpenEntitlementMenu( asset entitlementAsset )
{
	Assert( GetGlobalSettingsBool( entitlementAsset, "isMenuEnabled" ) )

	string titleText = Localize( GetGlobalSettingsString( entitlementAsset, "menuTitleText" ) )
	string descText = Localize( GetGlobalSettingsString( entitlementAsset, "menuDescText" ) )
	string imageName = GetGlobalSettingsString( entitlementAsset, "menuImageName" )
	imageName = GetCurrentPlaylistVarString( imageName + "_image_override", imageName )

	PromoDialog_OpenHijacked( "<p|" + imageName + "|" + titleText + "|" + descText + ">" )
}
#endif //


#if(false)




#endif //


#if(false)















#endif //


#if(false)




#endif