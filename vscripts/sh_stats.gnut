//


global function ShStats_LevelInit

#if CLIENT || UI 
global function GetCurrentStatSeasonRefOrNull
global function GetCurrentStatRankedPeriodRefOrNull	//
global function GetCurrentStatRankedPeriodRefOrNullByType //
//
#endif

#if(false)
































//





























//

//

//


//



//



//




//



//




//




//




//




//




//



//




//




//


//





//





//





//





#endif //


//
//
//
//
//

global const array<string> STATS_ALTERNATE_MODE_REFS = [
                       
         
      
"winter_express"
]

#if CLIENT || UI 
global struct CareerStats
{
	StatTemplate& account_level
	StatTemplate& total_legendary_items
	StatTemplate& num_characters_with_banners_once_filled
	StatTemplate& respawn_dev
	StatTemplate& ea_access_member
	StatTemplate& fashionista
	StatTemplate& weapons_with_legendary_skin
	StatTemplate& well_rounded
	StatTemplate& times_fully_kitted
	StatTemplate& distance_kill
	StatTemplate& placements_win_with_friends
	StatTemplate& placements_win_with_no_witnessess
	StatTemplate& placements_win_with_min_executions_per_person
	StatTemplate& team_work_kill_count
	StatTemplate& max_placement_win_streak_with_premade_squad
	StatTemplate& looted_all_launch_loot_once
	StatTemplate& master_of_all
	StatTemplate& starter_pack
	StatTemplate& founder_pack
	StatTemplate& twitch_pack
	StatTemplate& daily_challenges_completed
	StatTemplate& challenge_xp_earned
	StatTemplate& challenge_stars_earned

	//
	//
	//
	StatTemplate& looted_all_nongold_weapons_in_1_match

	StatTemplate& looted_epic_item
	StatTemplate& looted_legendary_item
	StatTemplate& looted_legendary_helmet
	StatTemplate& looted_legendary_armor

	StatTemplate& thanks
	StatTemplate& dooms
	StatTemplate& kills
	StatTemplate& times_got_doomed
	StatTemplate& deaths
	StatTemplate& assists
	StatTemplate& kills_or_assists
	//
	//
	StatTemplate& times_respawned_ally
	StatTemplate& winning_kills
	StatTemplate& kills_while_killleader
	StatTemplate& kills_max_single_game
	StatTemplate& damage_done
	StatTemplate& damage_done_midair
	StatTemplate& damage_taken
	StatTemplate& shots
	StatTemplate& hits
	StatTemplate& headshots
	StatTemplate& executions
	StatTemplate& revived_ally
	StatTemplate& respawned_ally

	StatTemplate& modes_games_played
	StatTemplate& modes_damage_done
	StatTemplate& modes_placements_win
	StatTemplate& modes_kills
	StatTemplate& modes_assists
	StatTemplate& modes_deaths
	StatTemplate& modes_dooms

	StatTemplate& modes_season_games_played
	StatTemplate& modes_season_damage_done
	StatTemplate& modes_season_placements_win
	StatTemplate& modes_season_kills
	StatTemplate& modes_season_assists
	StatTemplate& modes_season_deaths
	StatTemplate& modes_season_dooms

	StatTemplate& modes_character_games_played
	StatTemplate& modes_character_damage_done
	StatTemplate& modes_character_kills
	StatTemplate& modes_character_deaths
	StatTemplate& modes_character_placements_win
	//
	//
	StatTemplate& modes_weapon_damage_done
	StatTemplate& modes_weaponcategory_damage_done

                        
                                            
                                           

                                         
                                         

                                                   
                                                   
                                                      
                                                            
       

	StatTemplate& games_played_any_mode
	StatTemplate& character_games_played_any_mode

	StatTemplate& games_played
	StatTemplate& placements_win
	StatTemplate& placements_win_with_squad_alive
	StatTemplate& placements_top_3
	StatTemplate& placements_top_5
	StatTemplate& placements_top_10
	StatTemplate& win_streak_current
	StatTemplate& win_streak_longest
	StatTemplate& neutral_airdrops_looted
	//
	StatTemplate& weapon_kills
	StatTemplate& weapon_dooms
	StatTemplate& weapon_damage_done
	StatTemplate& weapon_shots
	StatTemplate& weapon_hits
	StatTemplate& weapon_headshots
	StatTemplate& character_kills
	StatTemplate& character_dooms
	StatTemplate& character_deaths
	StatTemplate& character_winning_kills
	StatTemplate& character_kills_while_killleader
	StatTemplate& character_damage_done
	StatTemplate& character_damage_done_max_single_game
	StatTemplate& character_shots
	StatTemplate& character_hits
	StatTemplate& character_headshots
	StatTemplate& character_executions
	StatTemplate& character_revived_ally
	StatTemplate& character_games_played
	StatTemplate& character_games_with_5_kills
	StatTemplate& character_games_with_20_kills
	StatTemplate& character_most_squad_squad_kills_in_1_game
	StatTemplate& character_placements_win
	StatTemplate& character_placements_win_with_squad_alive
	StatTemplate& character_placements_top_3
	StatTemplate& character_placements_win_with_friends
	StatTemplate& character_placements_win_as_jumpmaster
	StatTemplate& character_placements_win_as_killleader
	StatTemplate& character_placements_win_as_killleader_and_champion
	StatTemplate& character_placements_win_flawless_1
	StatTemplate& character_placements_win_flawless_2
	StatTemplate& character_placements_win_with_5_headshots

	StatTemplate& character_won_last_game
	StatTemplate& character_hot_streaks
	StatTemplate& character_games_with_respawning_both_teammates
	StatTemplate& character_rapid_eliminations
	StatTemplate& character_reinforcement_recalls
	StatTemplate& character_banner_once_filled

	StatTemplate& character_most_wins_in_24h
	StatTemplate& character_neutral_airdrops_looted
	//
	StatTemplate& character_weapon_kills
	StatTemplate& character_weapon_dooms
	StatTemplate& character_weapon_damage_done
	StatTemplate& character_weapon_shots
	StatTemplate& character_weapon_hits
	StatTemplate& character_weapon_headshots
	StatTemplate& character_weaponcategory_kills
	StatTemplate& character_weaponcategory_dooms
	StatTemplate& character_weaponcategory_damage_done
	StatTemplate& character_weaponcategory_shots
	StatTemplate& character_weaponcategory_hits
	StatTemplate& character_weaponcategory_headshots

	StatTemplate& weaponcategory_kills
	StatTemplate& weaponcategory_dooms
	StatTemplate& weaponcategory_damage_done
	StatTemplate& weaponcategory_headshots

	StatTemplate& evoarmor_evolves
	StatTemplate& evoarmor_evolves_to_purple

                   
                       
	StatTemplate& voidring_damage_prevented
       
      
	//
	StatTemplate& crafting_items_crafted
	StatTemplate& crafting_materials_collected
	//
	StatTemplate& times_jumpmaster
	StatTemplate& times_jumpmaster_post_fix //
	StatTemplate& valentines_revives_and_respawns

	//
	StatTemplate& bangalore_passive_distance
	StatTemplate& bangalore_tactical_smoke_hits
	StatTemplate& bangalore_ultimate_damage_done

	//
	StatTemplate& bloodhound_tactical_enemies_detected
	StatTemplate& bloodhound_tactical_traps_detected
	StatTemplate& bloodhound_ultimate_kills_while_active

	//
	StatTemplate& caustic_tactical_barrels_traps_detonated
	StatTemplate& caustic_gas_damage_dealt
	StatTemplate& caustic_passive_enemies_in_gas_killed

	//
	StatTemplate& crypto_passive_enemies_scanned
	StatTemplate& crypto_ultimate_shield_damage
	StatTemplate& crypto_ultimate_traps_destroyed

	//
	StatTemplate& gibraltar_tactical_bubble_enemy_damage_absorbed
	StatTemplate& gibraltar_ultimate_bombardment_kills
	StatTemplate& gibraltar_passive_gunshield_enemy_damage_absorbed

	//
	StatTemplate& lifeline_tactical_drone_healing_given
	StatTemplate& lifeline_ultimate_droppod_items_grabbed_by_allies
	StatTemplate& lifeline_passive_enemy_damage_absorbed

	//
	StatTemplate& loba_tactical_meters_teleported
	StatTemplate& loba_ultimate_loot_taken_by_allies
	StatTemplate& loba_passive_loot_pinged_through_walls

	//
	StatTemplate& mirage_decoys_created
	StatTemplate& mirage_successful_bamboozles
	StatTemplate& mirage_successful_revives

	//
	StatTemplate& octane_stim_distance_traveled
	StatTemplate& octane_jump_pad_allies_launched
	StatTemplate& octane_passive_health_regenerated

	//
	StatTemplate& pathfinder_tactical_meters_moved_by_grapple
	StatTemplate& pathfinder_ultimate_ziplines_used_by_allies
	StatTemplate& pathfinder_passive_beacons_scanned

	//
	StatTemplate& rampart_tactical_bullets_amped
	StatTemplate& rampart_tactical_damage_blocked
	StatTemplate& rampart_ultimate_bullets_fired

	//
	StatTemplate& revenant_silenced_target
	StatTemplate& revenant_silenced_target_knockdowns
	StatTemplate& revenant_death_totem_activates

	//
	StatTemplate& wattson_breaches_detected
	StatTemplate& wattson_friendly_shields_charged
	StatTemplate& wattson_enemy_ordnance_intercepted

	//
	StatTemplate& wraith_ultimate_phase_tunnel_ally_uses
	StatTemplate& wraith_passive_voices_heard
	StatTemplate& wraith_tactical_time_spent_in_phase

	//
	StatTemplate& horizon_hard_landings_avoided
	StatTemplate& horizon_teammates_gravity_lifted
	StatTemplate& horizon_blackhole_damage_done

//
	//
	StatTemplate& fuse_grenade_distance_thrown
	StatTemplate& fuse_cluster_bomb_hits
	StatTemplate& fuse_motherlode_enemies_captured
//


	//
	StatTemplate& season_battlepass_level
	StatTemplate& season_character_damage_done
	StatTemplate& season_character_kills
	StatTemplate& season_character_placements_win
	StatTemplate& season_character_placements_top_5
	StatTemplate& season_character_battlepass_bonus_xp
	StatTemplate& season_kills_with_7_characters
	StatTemplate& season_placements_wins_with_7_characters
	StatTemplate& season_placements_top_5_with_7_characters
	StatTemplate& season_battlepass_bonus_xp_with_7_characters
	StatTemplate& season_games_played
	StatTemplate& season_damage_done
	StatTemplate& season_character_damage_done_max_single_game
	StatTemplate& season_kills
	StatTemplate& season_deaths
	StatTemplate& season_dooms
	StatTemplate& season_assists
	StatTemplate& season_team_work_kill_count
	StatTemplate& season_revived_ally
	StatTemplate& season_times_respawned_ally
	StatTemplate& season_win_streak_current
	StatTemplate& season_win_streak_longest
	StatTemplate& season_kills_max_single_game
	StatTemplate& season_placements_win

                        
                                         
       

	//
	StatTemplate& elite_badge_unlock
	StatTemplate& elite_888_badge_unlock
	StatTemplate& character_elite_game_wins
	StatTemplate& character_elite_game_8kill_wins
	StatTemplate& season_elite_current_streak
	StatTemplate& season_elite_max_streak
	StatTemplate& season_character_elite_game_wins
	StatTemplate& season_character_elite_games_played
	StatTemplate& season_character_elite_kills
	//

	//
	StatTemplate& zone_kills
	StatTemplate& zone_damage_done
	StatTemplate& zone_dooms
	StatTemplate& zone_executions
	StatTemplate& zone_landings
	StatTemplate& zone_loot_bins
	StatTemplate& loot_bins
	StatTemplate& opponents_outlived
	StatTemplate& survival_time_seconds

	//
	StatTemplate& rankedperiod_games_played
	StatTemplate& rankedperiod_placements_win
	StatTemplate& rankedperiod_placements_top_5
	StatTemplate& rankedperiod_placements_top_10
	StatTemplate& rankedperiod_damage_done
	StatTemplate& rankedperiod_kills
	StatTemplate& rankedperiod_deaths
	StatTemplate& rankedperiod_kills_max_single_game
	StatTemplate& rankedperiod_dooms
	StatTemplate& rankedperiod_assists
	StatTemplate& rankedperiod_win_streak_current
	StatTemplate& rankedperiod_win_streak_longest
	StatTemplate& rankedperiod_revived_ally
	StatTemplate& rankedperiod_times_respawned_ally
	StatTemplate& rankedperiod_current_rank_score
	StatTemplate& rankedperiod_gained_rank_score_only
	StatTemplate& rankedperiod_badge_award_level

	StatTemplate& rankedperiod_character_damage_done_max_single_game

                        
    
                                                
                                                      
                                                          
                                                     
       

	//
	StatTemplate& character_solo_dooms
	StatTemplate& character_solo_placements_top_5
	StatTemplate& character_solo_wins
	StatTemplate& solo_placements_top_5
	StatTemplate& solo_dooms

	//
	StatTemplate& season01_event_placements_top_5
	StatTemplate& season01_event_elite_placements_top_5
	StatTemplate& season01_event_placements_win
	StatTemplate& season01_event_bp_premium_lvl

	//
	StatTemplate& octanett_ringoffire_times_traversed_with_armor
	StatTemplate& season02_event01_top5s_badge
	StatTemplate& season02_event01_character_solo_wins
	StatTemplate& season02_event01_num_characters_with_solo_win

	//
	StatTemplate& shotguns_and_snipers_plays
	StatTemplate& shotguns_and_snipers_wins
	StatTemplate& season02_event02_character_wins
	StatTemplate& season02_event02_num_characters_with_win

	//
	StatTemplate& s03e01_badge
	StatTemplate& s03e01_ltm_placements_win_legend
	StatTemplate& s03e01_ltm_placements_win_shadow
	StatTemplate& s03e01_ltm_win_as_both_kinds
	StatTemplate& s03e01_ltm_shadows_killed
	StatTemplate& s03e01_ltm_legends_killed
	StatTemplate& s03e01_ltm_kill_lootbin_creatures

	//
	StatTemplate& s03e02_mirage_party_button_presses
	StatTemplate& s03e02_winter_express_captures
	StatTemplate& s03e02_winter_express_character_kills
	StatTemplate& s03e02_winter_express_num_characters_with_a_kill

	//
	StatTemplate& s03_duos_badge_play
	StatTemplate& s03_duos_badge_win
	StatTemplate& s03_duos_tiers_earned

	//
	StatTemplate& s03e03_buffet_points
	StatTemplate& s03e03_play_each_game_mode
	StatTemplate& s03e03_placement_top_5
	StatTemplate& s03e03_thirdperson_plays
	StatTemplate& s03e03_thirdperson_damage_dealt_hipfire
	StatTemplate& s03e03_thirdperson_placements_win
	StatTemplate& s03e03_dbno_plays
	StatTemplate& s03e03_dbno_distance_skydive
	StatTemplate& s03e03_dbno_players_outlived
	StatTemplate& s03e03_dbno_placements_win
	StatTemplate& s03e03_night_plays
	StatTemplate& s03e03_night_damage_with_threatscope
	StatTemplate& s03e03_night_placements_win
	StatTemplate& s03e03_shotty_snipers_plays
	StatTemplate& s03e03_shotty_snipers_headshots
	StatTemplate& s03e03_shotty_snipers_placements_win
	StatTemplate& s03e03_always_be_closing_plays
	StatTemplate& s03e03_always_be_closing_distance_sprinted
	StatTemplate& s03e03_always_be_closing_placements_win
	StatTemplate& s03e03_dummie_plays
	StatTemplate& s03e03_dummie_ultimates_activated
	StatTemplate& s03e03_dummie_placements_win
	StatTemplate& s03e03_gold_guns_plays
	StatTemplate& s03e03_gold_guns_damage_done
	StatTemplate& s03e03_gold_guns_placements_win

	//
	StatTemplate& s04e01_buffet_points
	StatTemplate& s04e01_loot_lock_placements_top_10

	//
	StatTemplate& s04e02_buffet_points

	//
	StatTemplate& s05e01_buffet_points
	StatTemplate& s05e01_armed_and_dangerous_evolved_kills
	StatTemplate& s05e01_armed_and_dangerous_evolved_wins
	StatTemplate& s05e01_armed_and_dangerous_evolved_times_respawned_ally
	StatTemplate& s05e01_armed_and_dangerous_evolved_combined_badge_earned

	//
	StatTemplate& s06_story_challenge_we_device_activations_0
	StatTemplate& s06_story_challenge_we_device_activations_1
	StatTemplate& s06_story_challenge_we_device_activations_2
	StatTemplate& s06_story_challenge_kc_device_activations_0
	StatTemplate& s06_story_challenge_kc_device_activations_1
	StatTemplate& s06_story_challenge_kc_device_activations_2

	//
	StatTemplate& s06e01_buffet_points
	StatTemplate& s06e01_campfire_damage_dealt_in_zone
	StatTemplate& s06e01_campfire_players_killed_in_zone
	StatTemplate& s06e01_campfire_wins
	StatTemplate& s06e01_campfire_combined_badge_earned

	//
	StatTemplate& s06e02_buffet_points
	StatTemplate& s06e02_shadow_royale_kills
	StatTemplate& s06e02_shadow_royale_revives
	StatTemplate& s06e02_shadow_royale_wins
	StatTemplate& s06e02_shadow_royale_combined_badge_earned
	StatTemplate& s06e02_damage_done
	StatTemplate& s06e02_games_played
	StatTemplate& s06e02_placements_top_10

	//
	StatTemplate& s07e01_buffet_points
	StatTemplate& s07e01_winter_express_captures
	StatTemplate& s07e01_winter_express_kills
	StatTemplate& s07e01_winter_express_damage
	StatTemplate& s07e01_winter_express_combined_badge_earned

	//
	StatTemplate& s07e02_buffet_points
	StatTemplate& s07e02_airdropkitted_damage_dealt
	StatTemplate& s07e02_airdropkitted_knockdowns
	StatTemplate& s07e02_airdropkitted_wins
	StatTemplate& s07e02_airdropkitted_combined_badge_earned

	//
	StatTemplate& s08ace_buffet_points
	StatTemplate& s08ace_damage_done
	StatTemplate& s08ace_games_played
	StatTemplate& s08ace_placements_top_10

	//
	StatTemplate& s08seasonal_nessie_dailies
	StatTemplate& s08seasonal_weapon_damage
	StatTemplate& s08seasonal_character_wins
	StatTemplate& s08seasonal_combined_badge_earned

	//
	StatTemplate& s08e01_buffet_points
	StatTemplate& s08e01_damage_done
	StatTemplate& s08e01_games_played
	StatTemplate& s08e01_placements_top_10
	StatTemplate& s08e01_ringfury_challenge_2 //
	StatTemplate& s08e01_ringfury_challenge_3 //
	StatTemplate& s08e01_ringfury_challenge_4 //
	StatTemplate& s08e01_ringfury_combined_badge_earned

	//
	StatTemplate& s08e02_buffet_points
	StatTemplate& s08e02_damage_done
	StatTemplate& s08e02_games_played
	StatTemplate& s08e02_placements_top_10
	StatTemplate& s08e02_wargames_challenge_2 //
	StatTemplate& s08e02_wargames_challenge_3 //
	StatTemplate& s08e02_wargames_challenge_4 //
	StatTemplate& s08e02_wargames_combined_badge_earned

	StatTemplate& arenas_test_buffet_points

	//
                    
	StatTemplate& s08e04_kc_holosprays_scanned
	StatTemplate& s08e04_oly_holosprays_scanned
	StatTemplate& s08e04_finale_completed
         

	StatTemplate& first_played_unixtime

	//
                     
	StatTemplate& hovervehicle_occupant_meters_traveled
         

	//
	StatTemplate& clubs_games_played_with_club
	StatTemplate& clubs_placements_win_with_club
	StatTemplate& clubs_placements_win_with_club_squad_alive
	StatTemplate& clubs_placements_win_with_club_streak
	StatTemplate& clubs_placements_win_with_club_no_deaths
	StatTemplate& clubs_placements_win_with_club_no_deaths_or_knockouts
	StatTemplate& clubs_kills_with_club_squad
	//
	//
}

global struct MatchStats
{
	//
}
#endif

#if CLIENT || UI 
global CareerStats CAREER_STATS//
#endif


#if CLIENT || UI 
global const array<string> ZONE_STAT_REFS =
[
	"can_relay",
	"can_wetlands",
	"can_swamps",
	"can_hydrodam",
	"can_repulsor",
	"can_cage",
	"can_artillery",
	"can_containment",
	"can_watertreatment",
	"can_slumlakes",
	"can_pit",
	"can_runoff",
	"can_airbase",
	"can_skulltown",
	"can_market",
	"can_thunderdome",
	"can_bunker",
	"can_bridges",
	"can_cascades",
	"can_octanett", "des_wastelands",
	"des_uncharted",
	"des_snipe",
	"des_blood",
	"des_drill_site",
	"des_cap_city",
	"des_tunnel_z2",
	"des_lost",
	"des_buried_refinery",
	"des_ground_zero",
	"des_lava_fissure",
	"des_pass",
	"des_trainyard",
	"des_harvester",
	"des_fragment_west",
	"des_fragment_east",
	"des_survey",
	"des_tunnel_z5",
	"des_new_springfield",
	"des_snow_field",
	"des_tunnel_z7",
	"des_hot_spring",
	"des_end",
	"des_fuel",
	"des_ridge_line",
	"des_bridge",
	"des_out",
	"des_research_station_bravo",
	"des_tunnel_z10",
	"des_thermal_station",
	"des_research_station_alpha",
	"des_refinery",
	"des_lava_city",
	"des_volcanic",
	"des_mt",
]
#endif


//
//
//
//
//

struct
{
	#if(false)

#endif

}file
#if CLIENT || UI 
struct FileStruct_LifetimeLevel
{
	table<string, table<string, bool> > weaponStatCategoryWeaponItemRefSet

	#if(false)







#endif
}
FileStruct_LifetimeLevel& fileLevel
#endif



//
//
//
//
//
#if CLIENT || UI 
void function ShStats_LevelInit()
{
	#if(CLIENT)
		PIN_Init()
	#endif

	FileStruct_LifetimeLevel newFileLevel
	fileLevel = newFileLevel

	RegisterAllStats()

	#if(false)















#endif

}
#endif


#if CLIENT || UI 
void function RegisterAllStats()
{
	array<string> allCharacterRefs = []
	foreach ( ItemFlavor character in GetAllCharacters() )
		allCharacterRefs.append( ItemFlavor_GetGUIDString( character ) )

	array<string> allWeaponsRefs               = []
	array<string> allLootWeaponStatsCategories = []
	foreach ( ItemFlavor weapon in GetAllWeaponItemFlavors() )
	{
		string weaponRef = ItemFlavor_GetGUIDString( weapon )
		allWeaponsRefs.append( weaponRef )
		string category = WeaponItemFlavor_GetStatsCategory( weapon )

		bool isGold = (category == WEAPON_STAT_CATEGORY_GOLD_WEAPON)
		#if(false)



#endif

		if ( isGold )
		{
			string goldStatsCategory = WeaponCategoryFlavor_GetStatsKey( WeaponItemFlavor_GetCategory( weapon ) )
			if ( !(goldStatsCategory in fileLevel.weaponStatCategoryWeaponItemRefSet) )
			{
				fileLevel.weaponStatCategoryWeaponItemRefSet[goldStatsCategory] <- {}
				allLootWeaponStatsCategories.append( goldStatsCategory )
			}
			fileLevel.weaponStatCategoryWeaponItemRefSet[goldStatsCategory][weaponRef] <- true
		}

		if ( !(category in fileLevel.weaponStatCategoryWeaponItemRefSet) )
		{
			fileLevel.weaponStatCategoryWeaponItemRefSet[category] <- {}
			allLootWeaponStatsCategories.append( category )
		}
		fileLevel.weaponStatCategoryWeaponItemRefSet[category][weaponRef] <- true
	}

	array<string> allSeasonRefs = []
	foreach ( ItemFlavor season in GetAllSeasonFlavors() )
	{
		allSeasonRefs.append( ItemFlavor_GetGUIDString( season ) )
	}

	array<string> allRankedPeriodRefs = []
	array<ItemFlavor> allRankedPeriods = GetAllRankedPeriodFlavorsByType( eItemType.calevent_rankedperiod )

	foreach ( ItemFlavor rankedPeriod in allRankedPeriods )
	{
		allRankedPeriodRefs.append( ItemFlavor_GetGUIDString( rankedPeriod ) )
	}

	//
                        
                                              
                                                                                                                       
                                                                     
   
                                                                                     
   
       

	#if(false)


#endif

	const int CHALLENGES_NEED = eStatFlags.STORE_START_OF_PREVIOUS_MATCH | eStatFlags.PERSISTENCE_WRITE_IMMEDIATELY //
	const int CHALLENGES_CALC_DEPENDS = eStatFlags.PERSISTENCE_WRITE_IMMEDIATELY
	const int BADGES_NEED = eStatFlags.STORE_START_OF_PREVIOUS_MATCH
	const int TRACKERS_NEED = 0//

	CAREER_STATS.account_level = RegisterExpensiveCalculatedStat_Int( null, "account_level", BADGES_NEED, SetupGetAccountLevelForStat, [] )
	CAREER_STATS.total_legendary_items = RegisterCachedCalculatedStat_Int( null, "total_legendary_items", BADGES_NEED, SetupGetTotalLegendaryItemsForStat, [] )
	CAREER_STATS.num_characters_with_banners_once_filled = RegisterCachedCalculatedStat_Int( null, "num_characters_with_banners_once_filled", BADGES_NEED, SetupGetNumCharactersWithBannersOnceFilledForStat, [] )
	CAREER_STATS.ea_access_member = RegisterExpensiveCalculatedStat_Int( null, "ea_access_member", BADGES_NEED, SetupGetEAAccessStatusForStat, [] )
	CAREER_STATS.fashionista = RegisterCachedCalculatedStat_Int( null, "fashionista", BADGES_NEED, SetupGetCountOfCharactersWithLegendarySkinAndExecutionForStat, [] )
	CAREER_STATS.weapons_with_legendary_skin = RegisterCachedCalculatedStat_Int( null, "weapons_with_legendary_skin", BADGES_NEED, SetupGetCountOfWeaponsWithLegendarySkinsForStat, [] )
	CAREER_STATS.well_rounded = RegisterCachedCalculatedStat_Int( null, "well_rounded", BADGES_NEED, SetupGetCountOfCharactersWithWellRoundedDamageForStat, [] )
	CAREER_STATS.looted_all_launch_loot_once = RegisterCachedCalculatedStat_Int( null, "looted_all_launch_loot_once", BADGES_NEED, SetupGetTreasureHunterStatusForStat, [] )
	CAREER_STATS.master_of_all = RegisterCachedCalculatedStat_Int( null, "master_of_all", BADGES_NEED, SetupGetCountOfCharactersWithTenWinsForStat, [] )
	CAREER_STATS.starter_pack = RegisterExpensiveCalculatedStat_Int( null, "starter_pack_owner", BADGES_NEED, SetupGetStarterPackStatusForStat, [] )
	CAREER_STATS.founder_pack = RegisterExpensiveCalculatedStat_Int( null, "founder_pack_owner", BADGES_NEED, SetupGetFounderPackStatusForStat, [] )
	CAREER_STATS.twitch_pack = RegisterExpensiveCalculatedStat_Int( null, "twitch_pack_owner", 0, SetupGetTwitchPackStatusForStat, [] )

	CAREER_STATS.respawn_dev = RegisterAccumulatedStat_Int( null, "respawn_dev", BADGES_NEED )
	CAREER_STATS.times_fully_kitted = RegisterAccumulatedStat_Int( null, "times_fully_kitted", BADGES_NEED )
	CAREER_STATS.distance_kill = RegisterAccumulatedStat_Int( null, "distance_kill", BADGES_NEED )

	//
	//
	CAREER_STATS.times_jumpmaster = RegisterAccumulatedStat_Int( null, "times_jumpmaster" )
	CAREER_STATS.times_jumpmaster_post_fix = RegisterAccumulatedStat_Int( null, "times_jumpmaster_post_fix" )
	CAREER_STATS.looted_all_nongold_weapons_in_1_match = RegisterAccumulatedStat_Bool( null, "looted_all_nongold_weapons_in_1_match" ) //
	CAREER_STATS.valentines_revives_and_respawns = RegisterAccumulatedStat_Int( null, "valentines_revives_and_respawns", BADGES_NEED )

	CAREER_STATS.looted_epic_item = RegisterAccumulatedStat_Int( null, "looted_epic_item", CHALLENGES_NEED )
	CAREER_STATS.looted_legendary_item = RegisterAccumulatedStat_Int( null, "looted_legendary_item", CHALLENGES_NEED )
	CAREER_STATS.looted_legendary_helmet = RegisterAccumulatedStat_Int( null, "looted_legendary_helmet", CHALLENGES_NEED )
	CAREER_STATS.looted_legendary_armor = RegisterAccumulatedStat_Int( null, "looted_legendary_armor", CHALLENGES_NEED )

	CAREER_STATS.daily_challenges_completed = RegisterAccumulatedStat_Int( null, "daily_challenges_completed", CHALLENGES_NEED )
	CAREER_STATS.challenge_xp_earned = RegisterAccumulatedStat_Int( null, "challenge_xp_earned", CHALLENGES_NEED )
	CAREER_STATS.challenge_stars_earned = RegisterAccumulatedStat_Int( null, "challenge_stars_earned", CHALLENGES_NEED )

	CAREER_STATS.thanks = RegisterAccumulatedStat_Int( null, "thanks", CHALLENGES_NEED ) //
	CAREER_STATS.dooms = RegisterAccumulatedStat_Int( null, "dooms", CHALLENGES_NEED ) //
	CAREER_STATS.kills = RegisterAccumulatedStat_Int( null, "kills", CHALLENGES_NEED ) //
	CAREER_STATS.assists = RegisterAccumulatedStat_Int( null, "assists", CHALLENGES_NEED ) //
	CAREER_STATS.kills_or_assists = RegisterAccumulatedStat_Int( null, "kills_or_assists", CHALLENGES_NEED ) //
	//
	CAREER_STATS.times_got_doomed = RegisterAccumulatedStat_Int( null, "times_got_doomed" ) //
	CAREER_STATS.deaths = RegisterAccumulatedStat_Int( null, "deaths" ) //
	//
	//
	CAREER_STATS.times_respawned_ally = RegisterAccumulatedStat_Int( null, "times_respawned_ally" )
	CAREER_STATS.winning_kills = RegisterAccumulatedStat_Int( null, "winning_kills" ) //
	CAREER_STATS.win_streak_longest = RegisterAccumulatedStat_Int( null, "win_streak_longest" ) //
	CAREER_STATS.win_streak_current = RegisterVariableStat_Int( null, "win_streak_current" ) //
	CAREER_STATS.kills_while_killleader = RegisterAccumulatedStat_Int( null, "kills_while_killleader" )
	CAREER_STATS.kills_max_single_game = RegisterAccumulatedStat_Int( null, "kills_max_single_game" )
	CAREER_STATS.damage_done = RegisterAccumulatedStat_Int( null, "damage_done", CHALLENGES_NEED ) //
	CAREER_STATS.damage_done_midair = RegisterAccumulatedStat_Int( null, "damage_done_midair", CHALLENGES_NEED ) //
	CAREER_STATS.damage_taken = RegisterAccumulatedStat_Int( null, "damage_taken" ) //
	CAREER_STATS.shots = RegisterAccumulatedStat_Int( null, "shots" ) //
	CAREER_STATS.hits = RegisterAccumulatedStat_Int( null, "hits" ) //
	CAREER_STATS.headshots = RegisterAccumulatedStat_Int( null, "headshots", CHALLENGES_NEED ) //
	CAREER_STATS.executions = RegisterAccumulatedStat_Int( null, "executions", CHALLENGES_NEED ) //
	CAREER_STATS.revived_ally = RegisterAccumulatedStat_Int( null, "revived_ally", CHALLENGES_NEED ) //
	CAREER_STATS.respawned_ally = RegisterAccumulatedStat_Int( null, "respawned_ally", CHALLENGES_NEED ) //
	CAREER_STATS.games_played = RegisterAccumulatedStat_Int( null, "games_played", CHALLENGES_NEED ) //
	CAREER_STATS.placements_win = RegisterAccumulatedStat_Int( null, "placements_win", CHALLENGES_NEED ) //
	CAREER_STATS.placements_win_with_squad_alive = RegisterAccumulatedStat_Int( null, "placements_win_with_squad_alive" ) //
	CAREER_STATS.placements_top_3 = RegisterAccumulatedStat_Int( null, "placements_top_3", CHALLENGES_NEED ) //
	CAREER_STATS.placements_top_5 = RegisterAccumulatedStat_Int( null, "placements_top_5", CHALLENGES_NEED ) //
	CAREER_STATS.placements_top_10 = RegisterAccumulatedStat_Int( null, "placements_top_10", CHALLENGES_NEED ) //
	CAREER_STATS.placements_win_with_friends = RegisterAccumulatedStat_Int( null, "placements_win_with_friends", BADGES_NEED )
	CAREER_STATS.placements_win_with_no_witnessess = RegisterAccumulatedStat_Int( null, "placements_win_with_no_witnessess", BADGES_NEED )
	CAREER_STATS.placements_win_with_min_executions_per_person = RegisterAccumulatedStat_Int( null, "placements_win_with_min_executions_per_person", BADGES_NEED )
	CAREER_STATS.max_placement_win_streak_with_premade_squad = RegisterAccumulatedStat_Int( null, "max_placement_win_streak_with_premade_squad", BADGES_NEED )
	CAREER_STATS.team_work_kill_count = RegisterAccumulatedStat_Int( null, "team_work_kill_count", BADGES_NEED )
	CAREER_STATS.neutral_airdrops_looted = RegisterAccumulatedStat_Int( null, "neutral_airdrops_looted", CHALLENGES_NEED )
	//

	CAREER_STATS.games_played_any_mode = RegisterAccumulatedStat_Int( null, "games_played_any_mode", CHALLENGES_NEED ) //

	StatEnumStruct weapon_SES = RegisterStatEnumStruct( null, "weapons", "eWeaponFlavor", allWeaponsRefs ) //
	CAREER_STATS.weapon_kills = RegisterAccumulatedStat_Int( weapon_SES, "kills", CHALLENGES_NEED ) //
	CAREER_STATS.weapon_dooms = RegisterAccumulatedStat_Int( weapon_SES, "dooms", CHALLENGES_NEED ) //
	CAREER_STATS.weapon_damage_done = RegisterAccumulatedStat_Int( weapon_SES, "damage_done", CHALLENGES_NEED ) //
	CAREER_STATS.weapon_shots = RegisterAccumulatedStat_Int( weapon_SES, "shots" ) //
	CAREER_STATS.weapon_hits = RegisterAccumulatedStat_Int( weapon_SES, "hits" ) //
	CAREER_STATS.weapon_headshots = RegisterAccumulatedStat_Int( weapon_SES, "headshots", CHALLENGES_NEED ) //

	StatEnumStruct character_SES = RegisterStatEnumStruct( null, "characters", "eCharacterFlavor", allCharacterRefs )
	CAREER_STATS.character_kills = RegisterAccumulatedStat_Int( character_SES, "kills", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.character_dooms = RegisterAccumulatedStat_Int( character_SES, "dooms", CHALLENGES_NEED ) //
	CAREER_STATS.character_deaths = RegisterAccumulatedStat_Int( character_SES, "deaths" ) //
	CAREER_STATS.character_winning_kills = RegisterAccumulatedStat_Int( character_SES, "winning_kills", BADGES_NEED | TRACKERS_NEED ) //
	CAREER_STATS.character_kills_while_killleader = RegisterAccumulatedStat_Int( character_SES, "kills_while_killleader", TRACKERS_NEED )
	CAREER_STATS.character_damage_done = RegisterAccumulatedStat_Int( character_SES, "damage_done", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.character_damage_done_max_single_game = RegisterAccumulatedStat_Int( character_SES, "character_damage_done_max_single_game", BADGES_NEED ) //
	CAREER_STATS.character_shots = RegisterAccumulatedStat_Int( character_SES, "shots" ) //
	CAREER_STATS.character_hits = RegisterAccumulatedStat_Int( character_SES, "hits" ) //
	CAREER_STATS.character_headshots = RegisterAccumulatedStat_Int( character_SES, "headshots", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.character_executions = RegisterAccumulatedStat_Int( character_SES, "executions", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.character_revived_ally = RegisterAccumulatedStat_Int( character_SES, "revived_ally", TRACKERS_NEED ) //
	CAREER_STATS.character_games_played = RegisterAccumulatedStat_Int( character_SES, "games_played", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.character_games_played_any_mode = RegisterAccumulatedStat_Int( character_SES, "games_played_any_mode", CHALLENGES_NEED ) //
	CAREER_STATS.character_games_with_5_kills = RegisterAccumulatedStat_Int( character_SES, "games_with_5_kills", BADGES_NEED ) //
	CAREER_STATS.character_games_with_20_kills = RegisterAccumulatedStat_Int( character_SES, "games_with_20_kills", BADGES_NEED ) //
	CAREER_STATS.character_games_with_respawning_both_teammates = RegisterAccumulatedStat_Int( character_SES, "character_games_with_respawning_both_teammates", BADGES_NEED ) //
	CAREER_STATS.character_rapid_eliminations = RegisterAccumulatedStat_Int( character_SES, "character_rapid_eliminations", BADGES_NEED ) //
	CAREER_STATS.character_most_squad_squad_kills_in_1_game = RegisterAccumulatedStat_Int( character_SES, "most_squad_squad_kills_in_1_game", BADGES_NEED )
	CAREER_STATS.character_placements_win = RegisterAccumulatedStat_Int( character_SES, "placements_win", BADGES_NEED ) //
	CAREER_STATS.character_placements_win_with_squad_alive = RegisterAccumulatedStat_Int( character_SES, "placements_win_with_squad_alive", BADGES_NEED | TRACKERS_NEED ) //
	CAREER_STATS.character_placements_top_3 = RegisterAccumulatedStat_Int( character_SES, "placements_top_3", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.character_placements_win_as_jumpmaster = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_as_jumpmaster", BADGES_NEED ) //
	CAREER_STATS.character_placements_win_as_killleader = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_as_killleader", BADGES_NEED ) //
	CAREER_STATS.character_placements_win_as_killleader_and_champion = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_as_killleader_and_champion", BADGES_NEED ) //
	CAREER_STATS.character_placements_win_flawless_1 = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_flawless_1", BADGES_NEED ) //
	CAREER_STATS.character_placements_win_flawless_2 = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_flawless_2", BADGES_NEED ) //
	CAREER_STATS.character_placements_win_with_5_headshots = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_with_5_headshots", BADGES_NEED ) //

	//
	CAREER_STATS.character_won_last_game = RegisterVariableStat_Bool( character_SES, "character_won_last_game" ) //
	CAREER_STATS.character_hot_streaks = RegisterAccumulatedStat_Int( character_SES, "character_hot_streaks", BADGES_NEED ) //
	CAREER_STATS.character_reinforcement_recalls = RegisterAccumulatedStat_Int( character_SES, "character_reinforcement_recalls", BADGES_NEED ) //
	CAREER_STATS.character_banner_once_filled = RegisterAccumulatedStat_Bool( character_SES, "character_banner_once_filled" ) //

	//
	CAREER_STATS.character_neutral_airdrops_looted = RegisterAccumulatedStat_Int( character_SES, "neutral_airdrops_looted" )
	//

	StatEnumStruct character_weapon_SES = RegisterStatEnumStruct( character_SES, "weapons", "eWeaponFlavor", allWeaponsRefs ) //
	CAREER_STATS.character_weapon_kills = RegisterAccumulatedStat_Int( character_weapon_SES, "kills", TRACKERS_NEED | CHALLENGES_CALC_DEPENDS ) //
	CAREER_STATS.character_weapon_dooms = RegisterAccumulatedStat_Int( character_weapon_SES, "dooms", TRACKERS_NEED | CHALLENGES_CALC_DEPENDS ) //
	CAREER_STATS.character_weapon_damage_done = RegisterAccumulatedStat_Int( character_weapon_SES, "damage_done", CHALLENGES_CALC_DEPENDS ) //
	CAREER_STATS.character_weapon_shots = RegisterAccumulatedStat_Int( character_weapon_SES, "shots" ) //
	CAREER_STATS.character_weapon_hits = RegisterAccumulatedStat_Int( character_weapon_SES, "hits" ) //
	CAREER_STATS.character_weapon_headshots = RegisterAccumulatedStat_Int( character_weapon_SES, "headshots", CHALLENGES_CALC_DEPENDS ) //

	StatEnumStruct character_weaponcategory_SES = RegisterStatEnumStruct( character_SES, "weaponcategories", "eWeaponStatCategory", allLootWeaponStatsCategories )

	StatTemplate temp_var_until_R5DEV_35088_is_fixed

	StatEnumStruct modes_SES = RegisterStatEnumStruct( null, "modes", "eModesFlavors", STATS_ALTERNATE_MODE_REFS ) //
	CAREER_STATS.modes_games_played = RegisterAccumulatedStat_Int( modes_SES, "games_played", CHALLENGES_NEED ) //
	CAREER_STATS.modes_kills = RegisterAccumulatedStat_Int( modes_SES, "kills", CHALLENGES_NEED ) //
	CAREER_STATS.modes_assists = RegisterAccumulatedStat_Int( modes_SES, "assists" ) //
	CAREER_STATS.modes_deaths = RegisterAccumulatedStat_Int( modes_SES, "deaths" ) //
	CAREER_STATS.modes_dooms = RegisterAccumulatedStat_Int( modes_SES, "dooms", CHALLENGES_NEED ) //
	CAREER_STATS.modes_damage_done = RegisterAccumulatedStat_Int( modes_SES, "damage_done", CHALLENGES_NEED ) //
	CAREER_STATS.modes_placements_win = RegisterAccumulatedStat_Int( modes_SES, "placements_win", CHALLENGES_NEED ) //

	StatEnumStruct modes_season_SES = RegisterStatEnumStruct( modes_SES, "seasons", "eSeasonFlavor", allSeasonRefs )
	CAREER_STATS.modes_season_games_played = RegisterAccumulatedStat_Int( modes_season_SES, "games_played" ) //
	CAREER_STATS.modes_season_kills = RegisterAccumulatedStat_Int( modes_season_SES, "kills" ) //
	CAREER_STATS.modes_season_assists = RegisterAccumulatedStat_Int( modes_season_SES, "assists" ) //
	CAREER_STATS.modes_season_deaths = RegisterAccumulatedStat_Int( modes_season_SES, "deaths" ) //
	CAREER_STATS.modes_season_dooms = RegisterAccumulatedStat_Int( modes_season_SES, "dooms" ) //
	CAREER_STATS.modes_season_damage_done = RegisterAccumulatedStat_Int( modes_season_SES, "damage_done" ) //
	CAREER_STATS.modes_season_placements_win = RegisterAccumulatedStat_Int( modes_season_SES, "placements_win" ) //

	StatEnumStruct modes_characters_SES = RegisterStatEnumStruct( modes_SES, "characters", "eCharacterFlavor", allCharacterRefs ) //
	CAREER_STATS.modes_character_games_played = RegisterAccumulatedStat_Int( modes_characters_SES, "games_played" ) //
	CAREER_STATS.modes_character_damage_done = RegisterAccumulatedStat_Int( modes_characters_SES, "damage_done", TRACKERS_NEED ) //
	CAREER_STATS.modes_character_kills = RegisterAccumulatedStat_Int( modes_characters_SES, "kills", TRACKERS_NEED ) //
	CAREER_STATS.modes_character_deaths = RegisterAccumulatedStat_Int( modes_characters_SES, "deaths" ) //
	CAREER_STATS.modes_character_placements_win = RegisterAccumulatedStat_Int( modes_characters_SES, "placements_win", CHALLENGES_NEED ) //

	StatEnumStruct modes_weapon_SES = RegisterStatEnumStruct( modes_SES, "weapons", "eWeaponFlavor", allWeaponsRefs ) //
	CAREER_STATS.modes_weapon_damage_done = RegisterAccumulatedStat_Int( modes_weapon_SES, "damage_done", CHALLENGES_NEED ) //

	temp_var_until_R5DEV_35088_is_fixed = CAREER_STATS.modes_weapon_damage_done
	StatEnumStruct modes_weaponcategory_SES = RegisterStatEnumStruct( modes_SES, "weaponcategories", "eWeaponStatCategory", allLootWeaponStatsCategories )
	CAREER_STATS.modes_weaponcategory_damage_done = RegisterExpensiveCalculatedStat_Int( modes_weaponcategory_SES, "damage_done", CHALLENGES_CALC_DEPENDS,
		SetupModesWeaponCategoryStatSumEntryFunc_Int, [temp_var_until_R5DEV_35088_is_fixed] ) //

	//
	//
	//
	//

	//
	//
	//

                        
                                                                                                                           
                                                                                                                         

                                                                                                        
                                                                                                                        

                                                                                                                                        
                                                                                                                                                        
                                                                                                                                                              
                                                                                                                                                                          
       

	//
	CAREER_STATS.crafting_items_crafted = RegisterAccumulatedStat_Int( null, "items_crafted", CHALLENGES_NEED )
	CAREER_STATS.crafting_materials_collected = RegisterAccumulatedStat_Int( null, "materials_collected", CHALLENGES_NEED )


	temp_var_until_R5DEV_35088_is_fixed = CAREER_STATS.character_weapon_kills
	CAREER_STATS.character_weaponcategory_kills = RegisterExpensiveCalculatedStat_Int( character_weaponcategory_SES, "kills", CHALLENGES_CALC_DEPENDS,
		SetupCharacterWeaponCategoryStatSumEntryFunc_Int, [temp_var_until_R5DEV_35088_is_fixed] ) //

	temp_var_until_R5DEV_35088_is_fixed = CAREER_STATS.character_weapon_dooms
	CAREER_STATS.character_weaponcategory_dooms = RegisterExpensiveCalculatedStat_Int( character_weaponcategory_SES, "dooms", CHALLENGES_CALC_DEPENDS,
		SetupCharacterWeaponCategoryStatSumEntryFunc_Int, [temp_var_until_R5DEV_35088_is_fixed] ) //

	temp_var_until_R5DEV_35088_is_fixed = CAREER_STATS.character_weapon_damage_done
	CAREER_STATS.character_weaponcategory_damage_done = RegisterExpensiveCalculatedStat_Int( character_weaponcategory_SES, "damage_done", CHALLENGES_CALC_DEPENDS,
		SetupCharacterWeaponCategoryStatSumEntryFunc_Int, [temp_var_until_R5DEV_35088_is_fixed] ) //

	temp_var_until_R5DEV_35088_is_fixed = CAREER_STATS.character_weapon_shots
	CAREER_STATS.character_weaponcategory_shots = RegisterExpensiveCalculatedStat_Int( character_weaponcategory_SES, "shots", 0,
		SetupCharacterWeaponCategoryStatSumEntryFunc_Int, [temp_var_until_R5DEV_35088_is_fixed] ) //

	temp_var_until_R5DEV_35088_is_fixed = CAREER_STATS.character_weapon_hits
	CAREER_STATS.character_weaponcategory_hits = RegisterExpensiveCalculatedStat_Int( character_weaponcategory_SES, "hits", 0,
		SetupCharacterWeaponCategoryStatSumEntryFunc_Int, [temp_var_until_R5DEV_35088_is_fixed] ) //

	temp_var_until_R5DEV_35088_is_fixed = CAREER_STATS.character_weapon_headshots
	CAREER_STATS.character_weaponcategory_headshots = RegisterExpensiveCalculatedStat_Int( character_weaponcategory_SES, "headshots", CHALLENGES_CALC_DEPENDS,
		SetupCharacterWeaponCategoryStatSumEntryFunc_Int, [temp_var_until_R5DEV_35088_is_fixed] ) //


	StatEnumStruct weaponcategory_SES = RegisterStatEnumStruct( null, "weaponcategories", "eWeaponStatCategory", allLootWeaponStatsCategories )

	temp_var_until_R5DEV_35088_is_fixed = CAREER_STATS.character_weapon_kills
	CAREER_STATS.weaponcategory_kills = RegisterExpensiveCalculatedStat_Int( weaponcategory_SES, "kills", CHALLENGES_NEED,
		SetupWeaponCategoryStatSumEntryFunc_Int, [temp_var_until_R5DEV_35088_is_fixed] ) //

	temp_var_until_R5DEV_35088_is_fixed = CAREER_STATS.character_weapon_dooms
	CAREER_STATS.weaponcategory_dooms = RegisterExpensiveCalculatedStat_Int( weaponcategory_SES, "dooms", CHALLENGES_NEED,
		SetupWeaponCategoryStatSumEntryFunc_Int, [temp_var_until_R5DEV_35088_is_fixed] ) //

	temp_var_until_R5DEV_35088_is_fixed = CAREER_STATS.character_weapon_damage_done
	CAREER_STATS.weaponcategory_damage_done = RegisterExpensiveCalculatedStat_Int( weaponcategory_SES, "damage_done", CHALLENGES_NEED,
		SetupWeaponCategoryStatSumEntryFunc_Int, [temp_var_until_R5DEV_35088_is_fixed] ) //

	temp_var_until_R5DEV_35088_is_fixed = CAREER_STATS.character_weapon_headshots
	CAREER_STATS.weaponcategory_headshots = RegisterExpensiveCalculatedStat_Int( weaponcategory_SES, "headshots", CHALLENGES_NEED,
		SetupWeaponCategoryStatSumEntryFunc_Int, [temp_var_until_R5DEV_35088_is_fixed] ) //


	CAREER_STATS.evoarmor_evolves = RegisterAccumulatedStat_Int( null, "evoarmor_evolves", CHALLENGES_NEED )
	CAREER_STATS.evoarmor_evolves_to_purple = RegisterAccumulatedStat_Int( null, "evoarmor_evolves_to_purple", CHALLENGES_NEED )

                   
                       
	CAREER_STATS.voidring_damage_prevented = RegisterAccumulatedStat_Int( null, "voidring_damage_prevented", CHALLENGES_NEED )
       
      
	CAREER_STATS.bloodhound_tactical_enemies_detected = RegisterAccumulatedStat_Int( null, "bloodhound_tactical_enemies_detected", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.bloodhound_tactical_traps_detected = RegisterAccumulatedStat_Int( null, "bloodhound_tactical_traps_detected", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.bloodhound_ultimate_kills_while_active = RegisterAccumulatedStat_Int( null, "bloodhound_ultimate_kills_while_active", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.caustic_tactical_barrels_traps_detonated = RegisterAccumulatedStat_Int( null, "caustic_tactical_barrels_traps_detonated", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.caustic_gas_damage_dealt = RegisterAccumulatedStat_Int( null, "caustic_gas_damage_dealt", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.caustic_passive_enemies_in_gas_killed = RegisterAccumulatedStat_Int( null, "caustic_passive_enemies_in_gas_killed", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.crypto_passive_enemies_scanned = RegisterAccumulatedStat_Int( null, "crypto_passive_enemies_scanned", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.crypto_ultimate_shield_damage = RegisterAccumulatedStat_Int( null, "crypto_ultimate_shield_damage", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.crypto_ultimate_traps_destroyed = RegisterAccumulatedStat_Int( null, "crypto_ultimate_traps_destroyed", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.gibraltar_tactical_bubble_enemy_damage_absorbed = RegisterAccumulatedStat_Int( null, "gibraltar_tactical_bubble_enemy_damage_absorbed", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.gibraltar_ultimate_bombardment_kills = RegisterAccumulatedStat_Int( null, "gibraltar_ultimate_bombardment_kills", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.gibraltar_passive_gunshield_enemy_damage_absorbed = RegisterAccumulatedStat_Int( null, "gibraltar_passive_gunshield_enemy_damage_absorbed", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.lifeline_tactical_drone_healing_given = RegisterAccumulatedStat_Int( null, "lifeline_tactical_drone_healing_given", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.lifeline_ultimate_droppod_items_grabbed_by_allies = RegisterAccumulatedStat_Int( null, "lifeline_ultimate_droppod_items_grabbed_by_allies", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.lifeline_passive_enemy_damage_absorbed = RegisterAccumulatedStat_Int( null, "lifeline_passive_enemy_damage_absorbed", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.loba_tactical_meters_teleported = RegisterAccumulatedStat_Float( null, "loba_tactical_meters_teleported", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.loba_ultimate_loot_taken_by_allies = RegisterAccumulatedStat_Int( null, "loba_ultimate_loot_taken_by_allies", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.loba_passive_loot_pinged_through_walls = RegisterAccumulatedStat_Int( null, "loba_passive_loot_pinged_through_walls", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.mirage_decoys_created = RegisterAccumulatedStat_Int( null, "mirage_decoys_created", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.mirage_successful_bamboozles = RegisterAccumulatedStat_Int( null, "mirage_successful_bamboozles", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.mirage_successful_revives = RegisterAccumulatedStat_Int( null, "mirage_successful_revives", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.octane_stim_distance_traveled = RegisterAccumulatedStat_Float( null, "octane_stim_distance_traveled", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.octane_jump_pad_allies_launched = RegisterAccumulatedStat_Int( null, "octane_jump_pad_allies_launched", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.octane_passive_health_regenerated = RegisterAccumulatedStat_Int( null, "octane_passive_health_regenerated", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.pathfinder_tactical_meters_moved_by_grapple = RegisterAccumulatedStat_Float( null, "pathfinder_tactical_meters_moved_by_grapple", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.pathfinder_ultimate_ziplines_used_by_allies = RegisterAccumulatedStat_Int( null, "pathfinder_ultimate_ziplines_used_by_allies", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.pathfinder_passive_beacons_scanned = RegisterAccumulatedStat_Int( null, "pathfinder_passive_beacons_scanned", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.rampart_tactical_bullets_amped = RegisterAccumulatedStat_Int( null, "rampart_tactical_bullets_amped", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.rampart_tactical_damage_blocked = RegisterAccumulatedStat_Float( null, "rampart_tactical_damage_blocked", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.rampart_ultimate_bullets_fired = RegisterAccumulatedStat_Int( null, "rampart_ultimate_bullets_fired", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.wattson_breaches_detected = RegisterAccumulatedStat_Int( null, "wattson_breaches_detected", TRACKERS_NEED ) //
	CAREER_STATS.wattson_friendly_shields_charged = RegisterAccumulatedStat_Int( null, "wattson_friendly_shields_charged", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.wattson_enemy_ordnance_intercepted = RegisterAccumulatedStat_Int( null, "wattson_enemy_ordnance_intercepted", TRACKERS_NEED ) //
	CAREER_STATS.wraith_ultimate_phase_tunnel_ally_uses = RegisterAccumulatedStat_Int( null, "wraith_ultimate_phase_tunnel_ally_uses", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.wraith_passive_voices_heard = RegisterAccumulatedStat_Int( null, "wraith_passive_voices_heard", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.wraith_tactical_time_spent_in_phase = RegisterAccumulatedStat_Float( null, "wraith_tactical_time_spent_in_phase", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.bangalore_passive_distance = RegisterAccumulatedStat_Int( null, "bangalore_passive_distance", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.bangalore_tactical_smoke_hits = RegisterAccumulatedStat_Int( null, "bangalore_tactical_smoke_hits", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.bangalore_ultimate_damage_done = RegisterAccumulatedStat_Int( null, "bangalore_ultimate_damage_done", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.revenant_silenced_target = RegisterAccumulatedStat_Int( null, "revenant_silenced_target", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.revenant_silenced_target_knockdowns = RegisterAccumulatedStat_Int( null, "revenant_silenced_target_knockdowns", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.revenant_death_totem_activates = RegisterAccumulatedStat_Int( null, "revenant_death_totem_activates", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.horizon_hard_landings_avoided = RegisterAccumulatedStat_Int( null, "horizon_hard_landings_avoided", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.horizon_teammates_gravity_lifted = RegisterAccumulatedStat_Int( null, "horizon_teammates_gravity_lifted", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.horizon_blackhole_damage_done = RegisterAccumulatedStat_Int( null, "horizon_blackhole_damage_done", TRACKERS_NEED | CHALLENGES_NEED ) //
            
	CAREER_STATS.fuse_grenade_distance_thrown = RegisterAccumulatedStat_Float( null, "fuse_grenade_distance_thrown", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.fuse_cluster_bomb_hits = RegisterAccumulatedStat_Int( null, "fuse_cluster_bomb_hits", TRACKERS_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.fuse_motherlode_enemies_captured = RegisterAccumulatedStat_Int( null, "fuse_motherlode_enemies_captured", TRACKERS_NEED | CHALLENGES_NEED ) //
       

	StatEnumStruct season_SES = RegisterStatEnumStruct( null, "seasons", "eSeasonFlavor", allSeasonRefs )
	CAREER_STATS.season_battlepass_level = RegisterCachedCalculatedStat_Int( season_SES, "battlepass_level", BADGES_NEED, SetupGetSeasonBattlePassLevelForStat, [] ) //

	StatEnumStruct season_character_SES = RegisterStatEnumStruct( season_SES, "characters", "eCharacterFlavor", allCharacterRefs )
	CAREER_STATS.season_character_damage_done = RegisterAccumulatedStat_Int( season_character_SES, "damage_done", TRACKERS_NEED ) //
	CAREER_STATS.season_character_kills = RegisterAccumulatedStat_Int( season_character_SES, "kills", TRACKERS_NEED ) //
	CAREER_STATS.season_character_placements_win = RegisterAccumulatedStat_Int( season_character_SES, "placements_win", BADGES_NEED | TRACKERS_NEED ) //
	CAREER_STATS.season_character_placements_top_5 = RegisterAccumulatedStat_Int( season_character_SES, "placements_top_5" ) //
	CAREER_STATS.season_character_battlepass_bonus_xp = RegisterCachedCalculatedStat_Int( season_character_SES, "battlepass_bonus_xp", 0, SetupGetSeasonCharacterBonusXPForStat, [] ) //

	CAREER_STATS.season_kills_with_7_characters = RegisterCachedCalculatedStat_Int( season_SES, "kills_with_7_characters", BADGES_NEED, SetupGetNumKillsWithSevenCharactersForSeason, [] ) //
	CAREER_STATS.season_placements_wins_with_7_characters = RegisterCachedCalculatedStat_Int( season_SES, "placements_wins_with_7_characters", BADGES_NEED, SetupGetNumWinsWithSevenCharactersForSeason, [] ) //
	CAREER_STATS.season_placements_top_5_with_7_characters = RegisterCachedCalculatedStat_Int( season_SES, "placements_top_5_with_7_characters", BADGES_NEED, SetupGetNumTop5WithSevenCharactersForSeason, [] ) //
	CAREER_STATS.season_battlepass_bonus_xp_with_7_characters = RegisterCachedCalculatedStat_Int( season_SES, "battlepass_bonus_xp_with_7_characters", BADGES_NEED, SetupGetNumCharactersWithMilestoneBonusBattlePassXPForSeason, [] ) //

	//
	CAREER_STATS.season_games_played = RegisterAccumulatedStat_Int( season_SES, "games_played" )
	CAREER_STATS.season_placements_win = RegisterAccumulatedStat_Int( season_SES, "placements_win" )
	CAREER_STATS.season_damage_done = RegisterAccumulatedStat_Int( season_SES, "damage_done" )
	CAREER_STATS.season_kills = RegisterAccumulatedStat_Int( season_SES, "kills" )
	CAREER_STATS.season_deaths = RegisterAccumulatedStat_Int( season_SES, "deaths" )
	CAREER_STATS.season_dooms = RegisterAccumulatedStat_Int( season_SES, "dooms" )
	CAREER_STATS.season_team_work_kill_count = RegisterAccumulatedStat_Int( season_SES, "team_work_kill_count" )
	CAREER_STATS.season_revived_ally = RegisterAccumulatedStat_Int( season_SES, "revived_ally" )
	CAREER_STATS.season_times_respawned_ally = RegisterAccumulatedStat_Int( season_SES, "times_respawned_ally" )
	CAREER_STATS.season_character_damage_done_max_single_game = RegisterAccumulatedStat_Int( season_character_SES, "character_damage_done_max_single_game" )
	CAREER_STATS.season_assists = RegisterAccumulatedStat_Int( season_SES, "assists" )
	CAREER_STATS.season_kills_max_single_game = RegisterAccumulatedStat_Int( season_SES, "kills_max_single_game" )
	CAREER_STATS.season_win_streak_longest = RegisterAccumulatedStat_Int( season_SES, "win_streak_longest" )
	CAREER_STATS.season_win_streak_current = RegisterVariableStat_Int( season_SES, "win_streak_current" )

	CAREER_STATS.elite_badge_unlock = RegisterAccumulatedStat_Int( null, "elite_badge_unlock", BADGES_NEED )
	CAREER_STATS.elite_888_badge_unlock = RegisterExpensiveCalculatedStat_Int( null, "elite_888_badge_unlock", BADGES_NEED, SetupGetElite888StatusForStat, [] )
	CAREER_STATS.character_elite_game_wins = RegisterAccumulatedStat_Int( character_SES, "character_elite_game_wins", BADGES_NEED ) //
	CAREER_STATS.character_elite_game_8kill_wins = RegisterAccumulatedStat_Int( character_SES, "character_elite_game_8kill_wins", BADGES_NEED ) //
	CAREER_STATS.season_elite_current_streak = RegisterVariableStat_Int( season_SES, "elite_current_streak" ) //
	CAREER_STATS.season_elite_max_streak = RegisterAccumulatedStat_Int( season_SES, "elite_max_streak" ) //
	CAREER_STATS.season_character_elite_game_wins = RegisterAccumulatedStat_Int( season_character_SES, "elite_game_wins" )
	CAREER_STATS.season_character_elite_games_played = RegisterAccumulatedStat_Int( season_character_SES, "elite_games_played" )
	CAREER_STATS.season_character_elite_kills = RegisterAccumulatedStat_Int( season_character_SES, "elite_kills" )

                        
                                                                                                                          
       

	StatEnumStruct zone_SES = RegisterStatEnumStruct( null, "zones", "eMapZones", ZONE_STAT_REFS ) //
	CAREER_STATS.zone_kills = RegisterAccumulatedStat_Int( zone_SES, "kills", CHALLENGES_NEED ) //
	CAREER_STATS.zone_damage_done = RegisterAccumulatedStat_Int( zone_SES, "damage_done", CHALLENGES_NEED ) //
	CAREER_STATS.zone_dooms = RegisterAccumulatedStat_Int( zone_SES, "dooms", CHALLENGES_NEED ) //
	CAREER_STATS.zone_executions = RegisterAccumulatedStat_Int( zone_SES, "executions", CHALLENGES_NEED ) //
	CAREER_STATS.zone_landings = RegisterAccumulatedStat_Int( zone_SES, "landings", CHALLENGES_NEED ) //
	CAREER_STATS.zone_loot_bins = RegisterAccumulatedStat_Int( zone_SES, "loot_bins_opened", CHALLENGES_NEED ) //
	CAREER_STATS.loot_bins = RegisterAccumulatedStat_Int( null, "loot_bins_opened", CHALLENGES_NEED ) //
	CAREER_STATS.opponents_outlived = RegisterAccumulatedStat_Int( null, "opponents_outlived", CHALLENGES_NEED ) //
	CAREER_STATS.survival_time_seconds = RegisterAccumulatedStat_Int( null, "survival_time_seconds", CHALLENGES_NEED ) //

	CAREER_STATS.season01_event_placements_top_5 = RegisterAccumulatedStat_Int( null, "season01_event_placements_top_5", CHALLENGES_NEED | BADGES_NEED )
	CAREER_STATS.season01_event_elite_placements_top_5 = RegisterAccumulatedStat_Int( null, "season01_event_elite_placements_top_5", CHALLENGES_NEED )
	CAREER_STATS.season01_event_placements_win = RegisterAccumulatedStat_Int( null, "season01_event_placements_win", CHALLENGES_NEED )
	CAREER_STATS.season01_event_bp_premium_lvl = RegisterAccumulatedStat_Int( null, "season01_event_bp_premium_lvl", CHALLENGES_NEED )

	//

	//
	StatEnumStruct rankedperiod_SES = RegisterStatEnumStruct( null, "rankedperiods", "eRankedPeriodFlavor", allRankedPeriodRefs )
	CAREER_STATS.rankedperiod_games_played = RegisterAccumulatedStat_Int( rankedperiod_SES, "games_played", BADGES_NEED | CHALLENGES_NEED )
	CAREER_STATS.rankedperiod_placements_win = RegisterAccumulatedStat_Int( rankedperiod_SES, "placements_win", CHALLENGES_NEED )
	CAREER_STATS.rankedperiod_placements_top_5 = RegisterAccumulatedStat_Int( rankedperiod_SES, "placements_top_5", CHALLENGES_NEED )
	CAREER_STATS.rankedperiod_placements_top_10 = RegisterAccumulatedStat_Int( rankedperiod_SES, "placements_top_10", CHALLENGES_NEED )
	CAREER_STATS.rankedperiod_damage_done = RegisterAccumulatedStat_Int( rankedperiod_SES, "damage_done" )
	CAREER_STATS.rankedperiod_kills = RegisterAccumulatedStat_Int( rankedperiod_SES, "kills" )
	CAREER_STATS.rankedperiod_deaths = RegisterAccumulatedStat_Int( rankedperiod_SES, "deaths" )
	CAREER_STATS.rankedperiod_dooms = RegisterAccumulatedStat_Int( rankedperiod_SES, "dooms" )
	CAREER_STATS.rankedperiod_revived_ally = RegisterAccumulatedStat_Int( rankedperiod_SES, "revived_ally" )
	CAREER_STATS.rankedperiod_times_respawned_ally = RegisterAccumulatedStat_Int( rankedperiod_SES, "times_respawned_ally" )
	CAREER_STATS.rankedperiod_assists = RegisterAccumulatedStat_Int( rankedperiod_SES, "assists" )
	CAREER_STATS.rankedperiod_kills_max_single_game = RegisterAccumulatedStat_Int( rankedperiod_SES, "kills_max_single_game" )
	CAREER_STATS.rankedperiod_win_streak_longest = RegisterAccumulatedStat_Int( rankedperiod_SES, "win_streak_longest" )
	CAREER_STATS.rankedperiod_win_streak_current = RegisterVariableStat_Int( rankedperiod_SES, "win_streak_current" )
	CAREER_STATS.rankedperiod_current_rank_score = RegisterVariableStat_Int( rankedperiod_SES, "current_rank_score", BADGES_NEED | CHALLENGES_NEED )
	CAREER_STATS.rankedperiod_badge_award_level = RegisterVariableStat_Int( rankedperiod_SES, "badge_award_level", BADGES_NEED | CHALLENGES_NEED )
	CAREER_STATS.rankedperiod_gained_rank_score_only = RegisterAccumulatedStat_Int( rankedperiod_SES, "gained_rank_score_only", CHALLENGES_NEED )

	StatEnumStruct rankedperiod_character_SES = RegisterStatEnumStruct( rankedperiod_SES, "characters", "eCharacterFlavor", allCharacterRefs )
	CAREER_STATS.rankedperiod_character_damage_done_max_single_game = RegisterAccumulatedStat_Int( rankedperiod_character_SES, "character_damage_done_max_single_game" )

                        
                                                                                                                                                       
                                                                                                                                                      
                                                                                                                                                               
                                                                                                                                                             
                                                                                                                                                            
       


	CAREER_STATS.character_solo_dooms = RegisterAccumulatedStat_Int( character_SES, "solo_dooms", CHALLENGES_NEED ) //
	CAREER_STATS.character_solo_placements_top_5 = RegisterAccumulatedStat_Int( character_SES, "character_solo_placements_top_5", BADGES_NEED | CHALLENGES_NEED )
	CAREER_STATS.character_solo_wins = RegisterAccumulatedStat_Int( character_SES, "character_solo_wins", BADGES_NEED )

	temp_var_until_R5DEV_35088_is_fixed = CAREER_STATS.character_solo_dooms
	CAREER_STATS.solo_dooms = RegisterExpensiveCalculatedStat_Int( null, "solo_dooms", CHALLENGES_NEED,
		SetupCharacterStatSumEntryFunc_Int, [temp_var_until_R5DEV_35088_is_fixed] ) //

	temp_var_until_R5DEV_35088_is_fixed = CAREER_STATS.character_solo_placements_top_5
	CAREER_STATS.solo_placements_top_5 = RegisterExpensiveCalculatedStat_Int( null, "solo_placements_top_5", CHALLENGES_NEED,
		SetupCharacterStatSumEntryFunc_Int, [temp_var_until_R5DEV_35088_is_fixed] ) //

	CAREER_STATS.octanett_ringoffire_times_traversed_with_armor = RegisterAccumulatedStat_Int( null, "octanett_ringoffire_times_traversed_with_armor", CHALLENGES_NEED )
	CAREER_STATS.season02_event01_top5s_badge = RegisterAccumulatedStat_Int( null, "season02_event01_top5s_badge", BADGES_NEED | eStatFlags.PERSISTENCE_WRITE_IMMEDIATELY ) //
	CAREER_STATS.season02_event01_character_solo_wins = RegisterAccumulatedStat_Int( character_SES, "season02_event01_character_solo_wins", BADGES_NEED )
	CAREER_STATS.season02_event01_num_characters_with_solo_win = RegisterExpensiveCalculatedStat_Int( null, "season02_event01_num_characters_with_solo_win", BADGES_NEED,
		SetupGetNumSoloWinsWithAllCharactersIronCrown, [] )

	CAREER_STATS.shotguns_and_snipers_plays = RegisterAccumulatedStat_Int( null, "shotguns_and_snipers_plays", CHALLENGES_NEED )
	CAREER_STATS.shotguns_and_snipers_wins = RegisterAccumulatedStat_Int( null, "shotguns_and_snipers_wins", CHALLENGES_NEED )
	CAREER_STATS.season02_event02_character_wins = RegisterAccumulatedStat_Int( character_SES, "season02_event02_character_wins", CHALLENGES_NEED )
	CAREER_STATS.season02_event02_num_characters_with_win = RegisterExpensiveCalculatedStat_Int( null, "season02_event02_num_characters_with_win", CHALLENGES_NEED, SetupGetNumWinsWithAllCharactersWraithEvent, [] )

	CAREER_STATS.s03e01_badge = RegisterAccumulatedStat_Int( null, "s03e01_badge", BADGES_NEED )
	CAREER_STATS.s03e01_ltm_placements_win_legend = RegisterAccumulatedStat_Int( null, "s03e01_ltm_placements_win_legend", CHALLENGES_NEED )
	CAREER_STATS.s03e01_ltm_placements_win_shadow = RegisterAccumulatedStat_Int( null, "s03e01_ltm_placements_win_shadow", CHALLENGES_NEED )
	CAREER_STATS.s03e01_ltm_win_as_both_kinds = RegisterExpensiveCalculatedStat_Int( null, "s03e01_ltm_win_as_both_kinds", CHALLENGES_NEED, SetupS03E01LTMWinAsBothKinds, [] )
	CAREER_STATS.s03e01_ltm_shadows_killed = RegisterAccumulatedStat_Int( null, "s03e01_ltm_shadows_killed", CHALLENGES_NEED )
	CAREER_STATS.s03e01_ltm_legends_killed = RegisterAccumulatedStat_Int( null, "s03e01_ltm_legends_killed", CHALLENGES_NEED )
	CAREER_STATS.s03e01_ltm_kill_lootbin_creatures = RegisterAccumulatedStat_Int( null, "s03e01_ltm_kill_lootbin_creatures", CHALLENGES_NEED )

	CAREER_STATS.s03e02_mirage_party_button_presses = RegisterAccumulatedStat_Int( null, "s03e02_mirage_party_button_presses", CHALLENGES_NEED ) //
	CAREER_STATS.s03e02_winter_express_captures = RegisterAccumulatedStat_Int( null, "s03e02_winter_express_captures", BADGES_NEED | CHALLENGES_NEED ) //
	CAREER_STATS.s03e02_winter_express_character_kills = RegisterAccumulatedStat_Int( character_SES, "s03e02_winter_express_character_kills", CHALLENGES_NEED )
	CAREER_STATS.s03e02_winter_express_num_characters_with_a_kill = RegisterExpensiveCalculatedStat_Int( null, "s03e02_winter_express_num_characters_with_a_kill", CHALLENGES_NEED, SetupGetNumKillsWithAllCharactersWinterExpress, [] )

	CAREER_STATS.s03_duos_badge_play = RegisterAccumulatedStat_Int( null, "s03_duos_badge_play" )
	CAREER_STATS.s03_duos_badge_win = RegisterAccumulatedStat_Int( null, "s03_duos_badge_win" )
	CAREER_STATS.s03_duos_tiers_earned = RegisterExpensiveCalculatedStat_Int( null, "s03_duos_tiers_earned", BADGES_NEED, SetupGetDuosTiersEarned, [] )

	CAREER_STATS.s03e03_buffet_points = RegisterAccumulatedStat_Int( null, "s03e03_buffet_points", CHALLENGES_NEED | BADGES_NEED ) //
	CAREER_STATS.s03e03_play_each_game_mode = RegisterAccumulatedStat_Int( null, "s03e03_play_each_game_mode", CHALLENGES_NEED | BADGES_NEED ) //
	CAREER_STATS.s03e03_placement_top_5 = RegisterAccumulatedStat_Int( null, "s03e03_placement_top_5", CHALLENGES_NEED | BADGES_NEED ) //
	CAREER_STATS.s03e03_thirdperson_plays = RegisterAccumulatedStat_Int( null, "s03e03_thirdperson_plays", CHALLENGES_NEED ) //
	CAREER_STATS.s03e03_thirdperson_damage_dealt_hipfire = RegisterAccumulatedStat_Int( null, "s03e03_thirdperson_damage_dealt_hipfire", CHALLENGES_NEED ) //
	CAREER_STATS.s03e03_thirdperson_placements_win = RegisterAccumulatedStat_Int( null, "s03e03_thirdperson_placements_win", CHALLENGES_NEED ) //
	CAREER_STATS.s03e03_dbno_plays = RegisterAccumulatedStat_Int( null, "s03e03_dbno_plays", CHALLENGES_NEED ) //
	CAREER_STATS.s03e03_dbno_distance_skydive = RegisterAccumulatedStat_Int( null, "s03e03_dbno_distance_skydive", CHALLENGES_NEED ) //
	CAREER_STATS.s03e03_dbno_players_outlived = RegisterAccumulatedStat_Int( null, "s03e03_dbno_players_outlived", CHALLENGES_NEED ) //
	CAREER_STATS.s03e03_dbno_placements_win = RegisterAccumulatedStat_Int( null, "s03e03_dbno_placements_win", CHALLENGES_NEED ) //
	CAREER_STATS.s03e03_night_plays = RegisterAccumulatedStat_Int( null, "s03e03_night_plays", CHALLENGES_NEED ) //
	CAREER_STATS.s03e03_night_damage_with_threatscope = RegisterAccumulatedStat_Int( null, "s03e03_night_damage_with_threatscope", CHALLENGES_NEED ) //
	CAREER_STATS.s03e03_night_placements_win = RegisterAccumulatedStat_Int( null, "s03e03_night_placements_win", CHALLENGES_NEED ) //
	CAREER_STATS.s03e03_shotty_snipers_plays = RegisterAccumulatedStat_Int( null, "s03e03_shotty_snipers_plays", CHALLENGES_NEED ) //
	CAREER_STATS.s03e03_shotty_snipers_headshots = RegisterAccumulatedStat_Int( null, "s03e03_shotty_snipers_headshots", CHALLENGES_NEED ) //
	CAREER_STATS.s03e03_shotty_snipers_placements_win = RegisterAccumulatedStat_Int( null, "s03e03_shotty_snipers_placements_win", CHALLENGES_NEED ) //
	CAREER_STATS.s03e03_always_be_closing_plays = RegisterAccumulatedStat_Int( null, "s03e03_always_be_closing_plays", CHALLENGES_NEED ) //
	CAREER_STATS.s03e03_always_be_closing_distance_sprinted = RegisterAccumulatedStat_Int( null, "s03e03_always_be_closing_distance_sprinted", CHALLENGES_NEED )
	CAREER_STATS.s03e03_always_be_closing_placements_win = RegisterAccumulatedStat_Int( null, "s03e03_always_be_closing_placements_win", CHALLENGES_NEED ) //
	CAREER_STATS.s03e03_dummie_plays = RegisterAccumulatedStat_Int( null, "s03e03_dummie_plays", CHALLENGES_NEED ) //
	CAREER_STATS.s03e03_dummie_ultimates_activated = RegisterAccumulatedStat_Int( null, "s03e03_dummie_ultimates_activated", CHALLENGES_NEED )
	CAREER_STATS.s03e03_dummie_placements_win = RegisterAccumulatedStat_Int( null, "s03e03_dummie_placements_win", CHALLENGES_NEED ) //
	CAREER_STATS.s03e03_gold_guns_plays = RegisterAccumulatedStat_Int( null, "s03e03_gold_guns_plays", CHALLENGES_NEED ) //
	CAREER_STATS.s03e03_gold_guns_damage_done = RegisterAccumulatedStat_Int( null, "s03e03_gold_guns_damage_done", CHALLENGES_NEED ) //
	CAREER_STATS.s03e03_gold_guns_placements_win = RegisterAccumulatedStat_Int( null, "s03e03_gold_guns_placements_win", CHALLENGES_NEED ) //

	CAREER_STATS.s04e01_buffet_points = RegisterAccumulatedStat_Int( null, "s04e01_buffet_points", CHALLENGES_NEED | BADGES_NEED ) //
	CAREER_STATS.s04e01_loot_lock_placements_top_10 = RegisterAccumulatedStat_Int( null, "s04e01_loot_lock_placements_top_10", CHALLENGES_NEED ) //

	CAREER_STATS.s04e02_buffet_points = RegisterAccumulatedStat_Int( null, "s04e02_buffet_points", CHALLENGES_NEED | BADGES_NEED ) //

	CAREER_STATS.s05e01_buffet_points = RegisterAccumulatedStat_Int( null, "s05e01_buffet_points", CHALLENGES_NEED | BADGES_NEED )
	CAREER_STATS.s05e01_armed_and_dangerous_evolved_kills = RegisterAccumulatedStat_Int( null, "s05e01_armed_and_dangerous_evolved_kills", BADGES_NEED )
	CAREER_STATS.s05e01_armed_and_dangerous_evolved_wins = RegisterAccumulatedStat_Int( null, "s05e01_armed_and_dangerous_evolved_wins", BADGES_NEED )
	CAREER_STATS.s05e01_armed_and_dangerous_evolved_times_respawned_ally = RegisterAccumulatedStat_Int( null, "s05e01_armed_and_dangerous_evolved_times_respawned_ally", BADGES_NEED )
	CAREER_STATS.s05e01_armed_and_dangerous_evolved_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s05e01_armed_and_dangerous_evolved_combined_badge_earned", BADGES_NEED, SetupGetArmedAndDangerousEvolvedCombinedBadgeEarned, [] )

	CAREER_STATS.s06_story_challenge_we_device_activations_0 = RegisterAccumulatedStat_Int( null, "s06_story_challenge_we_device_activations_0", CHALLENGES_NEED ) //
	CAREER_STATS.s06_story_challenge_we_device_activations_1 = RegisterAccumulatedStat_Int( null, "s06_story_challenge_we_device_activations_1", CHALLENGES_NEED ) //
	CAREER_STATS.s06_story_challenge_we_device_activations_2 = RegisterAccumulatedStat_Int( null, "s06_story_challenge_we_device_activations_2", CHALLENGES_NEED ) //
	CAREER_STATS.s06_story_challenge_kc_device_activations_0 = RegisterAccumulatedStat_Int( null, "s06_story_challenge_kc_device_activations_0", CHALLENGES_NEED ) //
	CAREER_STATS.s06_story_challenge_kc_device_activations_1 = RegisterAccumulatedStat_Int( null, "s06_story_challenge_kc_device_activations_1", CHALLENGES_NEED ) //
	CAREER_STATS.s06_story_challenge_kc_device_activations_2 = RegisterAccumulatedStat_Int( null, "s06_story_challenge_kc_device_activations_2", CHALLENGES_NEED ) //

	CAREER_STATS.s06e01_buffet_points = RegisterAccumulatedStat_Int( null, "s06e01_buffet_points", CHALLENGES_NEED | BADGES_NEED )
	CAREER_STATS.s06e01_campfire_damage_dealt_in_zone = RegisterAccumulatedStat_Int( null, "s06e01_campfire_damage_dealt_in_zone", BADGES_NEED )
	CAREER_STATS.s06e01_campfire_players_killed_in_zone = RegisterAccumulatedStat_Int( null, "s06e01_campfire_players_killed_in_zone", BADGES_NEED )
	CAREER_STATS.s06e01_campfire_wins = RegisterAccumulatedStat_Int( null, "s06e01_campfire_wins", BADGES_NEED )
	CAREER_STATS.s06e01_campfire_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s06e01_campfire_combined_badge_earned", BADGES_NEED, SetupGetCampfireCombinedBadgeEarned, [] )

	CAREER_STATS.s06e02_buffet_points = RegisterAccumulatedStat_Int( null, "s06e02_buffet_points", CHALLENGES_NEED | BADGES_NEED )
	CAREER_STATS.s06e02_shadow_royale_kills = RegisterAccumulatedStat_Int( null, "s06e02_shadow_royale_kills", BADGES_NEED )
	CAREER_STATS.s06e02_shadow_royale_revives = RegisterAccumulatedStat_Int( null, "s06e02_shadow_royale_revives", BADGES_NEED )
	CAREER_STATS.s06e02_shadow_royale_wins = RegisterAccumulatedStat_Int( null, "s06e02_shadow_royale_wins", BADGES_NEED )
	CAREER_STATS.s06e02_shadow_royale_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s06e02_shadow_royale_combined_badge_earned", BADGES_NEED, SetupGetShadowRoyaleCombinedBadgeEarned, [] )
	CAREER_STATS.s06e02_damage_done = RegisterAccumulatedStat_Int( null, "s06e02_damage_done", CHALLENGES_NEED )
	CAREER_STATS.s06e02_games_played = RegisterAccumulatedStat_Int( null, "s06e02_games_played", CHALLENGES_NEED )
	CAREER_STATS.s06e02_placements_top_10 = RegisterAccumulatedStat_Int( null, "s06e02_placements_top_10", CHALLENGES_NEED )

	CAREER_STATS.s07e01_buffet_points = RegisterAccumulatedStat_Int( null, "s07e01_buffet_points", CHALLENGES_NEED | BADGES_NEED )
	CAREER_STATS.s07e01_winter_express_captures = RegisterAccumulatedStat_Int( null, "s07e01_winter_express_captures", BADGES_NEED )
	CAREER_STATS.s07e01_winter_express_kills = RegisterAccumulatedStat_Int( null, "s07e01_winter_express_kills", BADGES_NEED )
	CAREER_STATS.s07e01_winter_express_damage = RegisterAccumulatedStat_Int( null, "s07e01_winter_express_damage", BADGES_NEED | CHALLENGES_NEED )
	CAREER_STATS.s07e01_winter_express_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s07e01_winter_express_combined_badge_earned", BADGES_NEED, SetupGetWinterExpressCombinedBadgeEarned, [] )

	CAREER_STATS.s07e02_buffet_points = RegisterAccumulatedStat_Int( null, "s07e02_buffet_points", CHALLENGES_NEED | BADGES_NEED )
	CAREER_STATS.s07e02_airdropkitted_damage_dealt = RegisterAccumulatedStat_Int( null, "s07e02_airdropkitted_damage_dealt", BADGES_NEED | CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.s07e02_airdropkitted_knockdowns = RegisterAccumulatedStat_Int( null, "s07e02_airdropkitted_knockdowns", BADGES_NEED | CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.s07e02_airdropkitted_wins = RegisterAccumulatedStat_Int( null, "s07e02_airdropkitted_wins", BADGES_NEED | CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.s07e02_airdropkitted_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s07e02_airdropkitted_combined_badge_earned", BADGES_NEED, SetupGetAirdropKittedCombinedBadgeEarned, [] )


	CAREER_STATS.s08ace_buffet_points = RegisterAccumulatedStat_Int( null, "s08ace_buffet_points", CHALLENGES_NEED | BADGES_NEED )
	CAREER_STATS.s08ace_damage_done = RegisterAccumulatedStat_Int( null, "s08ace_damage_done", CHALLENGES_NEED )
	CAREER_STATS.s08ace_games_played = RegisterAccumulatedStat_Int( null, "s08ace_games_played", CHALLENGES_NEED )
	CAREER_STATS.s08ace_placements_top_10 = RegisterAccumulatedStat_Int( null, "s08ace_placements_top_10", CHALLENGES_NEED )

	//
	CAREER_STATS.s08seasonal_nessie_dailies = RegisterAccumulatedStat_Int( null, "s08seasonal_nessie_dailies", CHALLENGES_NEED )
	CAREER_STATS.s08seasonal_weapon_damage = RegisterAccumulatedStat_Int( null, "s08seasonal_weapon_damage",  CHALLENGES_NEED )
	CAREER_STATS.s08seasonal_character_wins = RegisterAccumulatedStat_Int( null, "s08seasonal_character_wins", CHALLENGES_NEED )
	CAREER_STATS.s08seasonal_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s08seasonal_combined_badge_earned", CHALLENGES_NEED, SetupGetS08SeasonalCombinedBadgeEarned, [] )

	//
	CAREER_STATS.s08e01_buffet_points = RegisterAccumulatedStat_Int( null, "s08e01_buffet_points", CHALLENGES_NEED | BADGES_NEED )
	CAREER_STATS.s08e01_damage_done = RegisterAccumulatedStat_Int( null, "s08e01_damage_done", CHALLENGES_NEED )
	CAREER_STATS.s08e01_games_played = RegisterAccumulatedStat_Int( null, "s08e01_games_played", CHALLENGES_NEED )
	CAREER_STATS.s08e01_placements_top_10 = RegisterAccumulatedStat_Int( null, "s08e01_placements_top_10", CHALLENGES_NEED )
	CAREER_STATS.s08e01_ringfury_challenge_2 = RegisterAccumulatedStat_Int( null, "s08e01_ringfury_challenge_2", CHALLENGES_NEED )
	CAREER_STATS.s08e01_ringfury_challenge_3 = RegisterAccumulatedStat_Int( null, "s08e01_ringfury_challenge_3", CHALLENGES_NEED )
	CAREER_STATS.s08e01_ringfury_challenge_4 = RegisterAccumulatedStat_Int( null, "s08e01_ringfury_challenge_4", CHALLENGES_NEED )
	CAREER_STATS.s08e01_ringfury_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s08e01_ringfury_combined_badge_earned", BADGES_NEED, SetupGetRingFuryCombinedBadgeEarned, [] )

	//
	CAREER_STATS.s08e02_buffet_points = RegisterAccumulatedStat_Int( null, "s08e02_buffet_points", CHALLENGES_NEED | BADGES_NEED )
	CAREER_STATS.s08e02_damage_done = RegisterAccumulatedStat_Int( null, "s08e02_damage_done", CHALLENGES_NEED )
	CAREER_STATS.s08e02_games_played = RegisterAccumulatedStat_Int( null, "s08e02_games_played", CHALLENGES_NEED )
	CAREER_STATS.s08e02_placements_top_10 = RegisterAccumulatedStat_Int( null, "s08e02_placements_top_10", CHALLENGES_NEED )
	CAREER_STATS.s08e02_wargames_challenge_2 = RegisterAccumulatedStat_Int( null, "s08e02_wargames_challenge_2", CHALLENGES_NEED )
	CAREER_STATS.s08e02_wargames_challenge_3 = RegisterAccumulatedStat_Int( null, "s08e02_wargames_challenge_3", CHALLENGES_NEED )
	CAREER_STATS.s08e02_wargames_challenge_4 = RegisterAccumulatedStat_Int( null, "s08e02_wargames_challenge_4", CHALLENGES_NEED )
	CAREER_STATS.s08e02_wargames_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s08e02_wargames_combined_badge_earned", BADGES_NEED, SetupGetWarGamesCombinedBadgeEarned, [] )

                          
                                                                                                                                         
       

	//
                     
	CAREER_STATS.s08e04_kc_holosprays_scanned = RegisterAccumulatedStat_Int( null, "s08e04_kc_holosprays_scanned", CHALLENGES_NEED )
	CAREER_STATS.s08e04_oly_holosprays_scanned = RegisterAccumulatedStat_Int( null, "s08e04_oly_holosprays_scanned", CHALLENGES_NEED )
	CAREER_STATS.s08e04_finale_completed = RegisterAccumulatedStat_Int( null, "s08e04_finale_completed", CHALLENGES_NEED )
          

	CAREER_STATS.first_played_unixtime = RegisterExpensiveCalculatedStat_Int( null, "first_played_unixtime", TRACKERS_NEED, SetFirstPlayedUnixTime, [] )

                      
		CAREER_STATS.hovervehicle_occupant_meters_traveled = RegisterAccumulatedStat_Int( null, "hovervehicle_occupant_meters_traveled", TRACKERS_NEED | CHALLENGES_NEED ) //
          

	CAREER_STATS.clubs_games_played_with_club = RegisterAccumulatedStat_Int( null, "clubs_games_played_with_club", BADGES_NEED )
	CAREER_STATS.clubs_placements_win_with_club = RegisterAccumulatedStat_Int( null, "clubs_placements_win_with_club", BADGES_NEED )
	CAREER_STATS.clubs_placements_win_with_club_squad_alive = RegisterAccumulatedStat_Int( null, "clubs_placements_win_with_club_squad_alive", BADGES_NEED )
	CAREER_STATS.clubs_placements_win_with_club_streak = RegisterAccumulatedStat_Int( null, "clubs_placements_win_with_club_streak", BADGES_NEED )
	CAREER_STATS.clubs_placements_win_with_club_no_deaths = RegisterAccumulatedStat_Int( null, "clubs_placements_win_with_club_no_deaths", BADGES_NEED )
	CAREER_STATS.clubs_placements_win_with_club_no_deaths_or_knockouts = RegisterAccumulatedStat_Int( null, "clubs_placements_win_with_club_no_deaths_or_knockouts", BADGES_NEED )
	//
	//
	//
}
#endif


#if(false)




//






//





#endif



//
//
//
//
//
bool function IsValidMapForStats()
{
	if ( IsSurvivalTraining() )
		return false

	if ( IsFiringRangeGameMode() )
		return false

	if ( IsPrivateMatch() )
		return false

	if ( IsLobby() )
		return false

	return true
}

#if(false)


























































//










//





#endif

//
//
//
#if(false)






























//










































































































































//
//



//






//
//
//
//
//
//
//


























































//








//















































//
//
//
//
//
//
//





//
//






























//
//











//












//










//















































































//













































































































//


//









































//























#endif



//
//
//
#if(false)




//
















/*










*/




/*


















*/






//






//








//
//











//








//
//

#endif



//
//
//
#if(false)


























































//




//








//





















//








//





















































//










//


//
//
//



























//








//



























//




//






//









//
//


//



//
//
















//
//




//
//










//







//



//




































//




//
































//






































//









//
































#endif //







//
//
//
#if(false)


























//




//







//












//






















//



//












//








//


//



//




//





//



















//












//

//






















//














#endif



//
//
//
#if(false)




























































//






































//



























//




































































//







#endif

//
//
//
#if(false)

//





















//




//
//
//
//
//
//
//

//












//






//



//


//









//




//
















//



//













//






























//



//






































//




//
















//


//

//








//





























//





//












//
























//











//















//












//




//
//



































//

















//





//



















//

















//










//


//
























































































//

























//







































































































#endif //

//
//
//
#if(false)




#endif


//
//
//
#if(false)










//




#endif


#if(false)




#endif

                      
#if(false)







#endif //
         

                     
#if(false)









#endif //
         

                 
#if(false)




#endif //
         


#if(false)























#endif //


#if(false)






















#endif //

#if(false)




//



//
















#endif

//
//
//
//
//
#if CLIENT || UI 
StatCalcFuncInfo function SetupGetAccountLevelForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int xpProgress   = GetPlayerAccountXPProgress( ToEHI( player ) )
		int accountLevel = GetAccountLevelForXP( xpProgress )
		return minint( accountLevel, GetHighestAccountDisplaylevel() )
	})

	return info
}
#endif


#if CLIENT || UI 
StatCalcFuncInfo function SetupModesWeaponCategoryStatSumEntryFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatTemplate sourceTemplate = sourceTemplates[0]

	StatCalcFuncInfo info

	string calcMode 		  = calcEntry.enumKeys[0]
	string calcWeaponCategory = calcEntry.enumKeys[1]

	foreach ( string weaponItemRefInCategory, bool unused in fileLevel.weaponStatCategoryWeaponItemRefSet[calcWeaponCategory] )
	{
		info.sourceEntries.append( ResolveStatEntry( sourceTemplate, calcMode, weaponItemRefInCategory ) )
	}

	info.calcFunc_Int = CalcStatSum_Int

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupCharacterWeaponCategoryStatSumEntryFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatTemplate sourceTemplate = sourceTemplates[0]

	StatCalcFuncInfo info

	string calcCharacter      = calcEntry.enumKeys[0]
	string calcWeaponCategory = calcEntry.enumKeys[1]

	foreach ( string weaponItemRefInCategory, bool unused in fileLevel.weaponStatCategoryWeaponItemRefSet[calcWeaponCategory] )
	{
		info.sourceEntries.append( ResolveStatEntry( sourceTemplate, calcCharacter, weaponItemRefInCategory ) )
	}

	info.calcFunc_Int = CalcStatSum_Int

	return info
}
#endif


#if CLIENT || UI 
StatCalcFuncInfo function SetupWeaponCategoryStatSumEntryFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatTemplate sourceTemplate = sourceTemplates[0]

	StatCalcFuncInfo info

	string calcWeaponCategory = calcEntry.enumKeys[0]

	foreach ( string weaponItemRefInCategory, bool unused in fileLevel.weaponStatCategoryWeaponItemRefSet[calcWeaponCategory] )
	{
		foreach ( ItemFlavor character in GetAllCharacters() )
		{
			info.sourceEntries.append( ResolveStatEntry( sourceTemplate, ItemFlavor_GetGUIDString( character ), weaponItemRefInCategory ) )
		}
	}

	info.calcFunc_Int = CalcStatSum_Int

	return info
}
#endif


#if CLIENT || UI 
StatCalcFuncInfo function SetupCharacterStatSumEntryFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatTemplate sourceTemplate = sourceTemplates[0]

	StatCalcFuncInfo info

	foreach ( ItemFlavor character in GetAllCharacters() )
		info.sourceEntries.append( ResolveStatEntry( sourceTemplate, ItemFlavor_GetGUIDString( character ) ) )

	info.calcFunc_Int = CalcStatSum_Int

	return info
}
#endif


#if CLIENT || UI 
int function CalcStatSum_Int( entity player, array<StatEntry> sourceEntries, int when )
{
	int sum = 0
	foreach ( StatEntry sourceEntry in sourceEntries )
		sum += GetStat_Int( player, sourceEntry, when )
	return sum
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetTotalLegendaryItemsForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		Assert( GRX_IsInventoryReady( player ) )

		int count = 0
		foreach ( ItemFlavor flav in GetAllItemFlavors() )
		{
			if ( ItemFlavor_GetGRXMode( flav ) != eItemFlavorGRXMode.REGULAR )
				continue

			if ( !ItemFlavor_HasQuality( flav ) || ItemFlavor_GetQuality( flav ) < eRarityTier.LEGENDARY )
				continue

			if ( GRX_IsItemOwnedByPlayer_AllowOutOfDateData( flav, player ) )
				count++
		}

		return count
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetNumCharactersWithBannersOnceFilledForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		foreach ( ItemFlavor character in GetAllCharacters() )
		{
			if ( GetStat_Bool( player, ResolveStatEntry( CAREER_STATS.character_banner_once_filled, ItemFlavor_GetGUIDString( character ) ), when ) )
				count++
		}
		return count
	})

	return info
}
#endif
#if(false)






















#endif
#if(false)



//
















//












#endif


#if CLIENT || UI 
string ornull function GetCurrentStatSeasonRefOrNull()
{
	ItemFlavor ornull season = GetActiveSeason( GetUnixTimestamp() ) //
	if ( season == null )
		return null
	return ItemFlavor_GetGUIDString( expect ItemFlavor(season) )
}
#endif

#if CLIENT || UI 
string ornull function GetCurrentStatRankedPeriodRefOrNull()
{
	//
	ItemFlavor ornull rankedPeriod = GetActiveRankedPeriodByType( GetUnixTimestamp(), eItemType.calevent_rankedperiod )
	if ( rankedPeriod == null )
		return null
	return ItemFlavor_GetGUIDString( expect ItemFlavor(rankedPeriod) )
}

string ornull function GetCurrentStatRankedPeriodRefOrNullByType( int itemType )
{
	//
	ItemFlavor ornull rankedPeriod = GetActiveRankedPeriodByType( GetUnixTimestamp(), itemType )
	if ( rankedPeriod == null )
		return null
	return ItemFlavor_GetGUIDString( expect ItemFlavor(rankedPeriod) )
}

#endif

#if CLIENT || UI 
//
/*








*/
#endif


#if CLIENT || UI 
StatCalcFuncInfo function SetupGetStarterPackStatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when )
	{
		return PlayerHasStarterPack( player ) ? 1 : 0
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetFounderPackStatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when )
	{
		return PlayerHasFoundersPack( player ) ? 1 : 0
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetTwitchPackStatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		#if(CLIENT)
			return player.DoesUserHaveTwitchPrimeReward( "twitch_launch_promo" ) ? 1 : 0
		#endif
		#if(UI)
			return GetConVarInt( "twitch_prime_rewards" ) > 0 ? 1 : 0
		#endif
	})

	return info
}
#endif


#if CLIENT || UI 
StatCalcFuncInfo function SetupGetEAAccessStatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		return PlayerHadEAAccess( player ) ? 1 : 0
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetCountOfCharactersWithLegendarySkinAndExecutionForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		Assert( GRX_IsInventoryReady( player ) )

		int count = 0
		foreach ( ItemFlavor character in GetAllCharacters() )
		{
			bool hasLegendarySkin     = false
			bool hasLegendaryFinisher = false

			array<ItemFlavor> characterSkins = GetValidItemFlavorsForLoadoutSlot( ToEHI( player ), Loadout_CharacterSkin( character ) )
			foreach ( skin in characterSkins )
			{
				if ( GRX_IsItemOwnedByPlayer_AllowOutOfDateData( skin, player ) && ItemFlavor_HasQuality( skin ) && ItemFlavor_GetQuality( skin ) >= eRarityTier.LEGENDARY )
				{
					hasLegendarySkin = true
					break
				}
			}

			array<ItemFlavor> executions = GetValidItemFlavorsForLoadoutSlot( ToEHI( player ), Loadout_CharacterExecution( character ) )
			foreach ( execution in executions )
			{
				if ( GRX_IsItemOwnedByPlayer_AllowOutOfDateData( execution, player ) && ItemFlavor_HasQuality( execution ) && ItemFlavor_GetQuality( execution ) >= eRarityTier.LEGENDARY )
				{
					hasLegendaryFinisher = true
					break
				}
			}

			if ( hasLegendarySkin && hasLegendaryFinisher )
				count++
		}

		return count
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetCountOfWeaponsWithLegendarySkinsForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		Assert( GRX_IsInventoryReady( player ) )

		int count = 0
		foreach ( ItemFlavor weapon in GetAllWeaponItemFlavors() )
		{
			array<ItemFlavor> weaponSkins = GetValidItemFlavorsForLoadoutSlot( ToEHI( player ), Loadout_WeaponSkin( weapon ) )
			foreach ( skin in weaponSkins )
			{
				if ( GRX_IsItemOwnedByPlayer_AllowOutOfDateData( skin, player ) && ItemFlavor_HasQuality( skin ) && ItemFlavor_GetQuality( skin ) >= eRarityTier.LEGENDARY )
				{
					count++
					break
				}
			}
		}
		return count
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetCountOfCharactersWithWellRoundedDamageForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0
		foreach ( char in GetAllCharacters() )
		{
			string characterRef = ItemFlavor_GetGUIDString( char )
			int damageDone      = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.character_damage_done, characterRef ), when )
			if ( damageDone > 20000 )
				count++
		}
		return count
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetTreasureHunterStatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		//
		return 0
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetElite888StatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		foreach ( ItemFlavor character in GetAllCharacters() )
		{
			if ( GetStat_Int( player, ResolveStatEntry( CAREER_STATS.character_elite_game_8kill_wins, ItemFlavor_GetGUIDString( character ) ), when ) >= 1 )
				count++
		}

		return count
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetNumSoloWinsWithAllCharactersIronCrown( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		foreach ( ItemFlavor character in GetAllCharacters() )
		{
			if ( GetStat_Int( player, ResolveStatEntry( CAREER_STATS.season02_event01_character_solo_wins, ItemFlavor_GetGUIDString( character ) ), when ) >= 1 )
				count++
		}

		return count
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetDuosTiersEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int tiersEarned = 0

		int gamesPlayed = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s03_duos_badge_play ), when )
		int gamesWon    = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s03_duos_badge_win ), when )

		if ( gamesPlayed > 0 )
			tiersEarned = 1

		if ( gamesWon >= 2 )
			tiersEarned = gamesWon

		return tiersEarned
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetFirstPlayedUnixTime( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int launchUnixTime           = 1549310400
		int daysInstalledAfterLaunch = (player.GetPersistentVarAsInt( "installUnixTime" ) - launchUnixTime) / SECONDS_PER_DAY

		//
		if ( daysInstalledAfterLaunch <= 7 )
			return 2

		//
		if ( daysInstalledAfterLaunch <= 31 )
			return 1

		//
		return 0
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetCountOfCharactersWithTenWinsForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0
		foreach ( ItemFlavor character in GetAllCharacters() )
		{
			if ( GetStat_Int( player, ResolveStatEntry( CAREER_STATS.character_placements_win, ItemFlavor_GetGUIDString( character ) ), when ) >= 10 )
				count++
		}

		return count
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetSeasonBattlePassLevelForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	string seasonRef = calcEntry.enumKeys[0]

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) : ( seasonRef ) {
		ItemFlavor season = GetItemFlavorByGUID( ConvertItemFlavorGUIDStringToGUID( seasonRef ) )
		ItemFlavor pass   = Season_GetBattlePass( season )

		//
		//
		//

		return GetPlayerBattlePassLevel( player, pass, false ) + 1
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetSeasonCharacterBonusXPForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	string seasonRef    = calcEntry.enumKeys[0]
	string characterRef = calcEntry.enumKeys[1]

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) : ( seasonRef, characterRef ) {
		return GetPlayerBattlePassCharacterXP( player,
			Season_GetBattlePass( GetItemFlavorByGUID( ConvertItemFlavorGUIDStringToGUID( seasonRef ) ) ),
			GetItemFlavorByGUID( ConvertItemFlavorGUIDStringToGUID( characterRef ) ) )
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetNumKillsWithSevenCharactersForSeason( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	string seasonRef = calcEntry.enumKeys[0]

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) : ( seasonRef ) {
		array<int> numKillsList = []
		foreach ( ItemFlavor character in GetAllCharacters() )
		{
			numKillsList.append( GetStat_Int( player, ResolveStatEntry( CAREER_STATS.season_character_kills, seasonRef, ItemFlavor_GetGUIDString( character ) ), when ) )
		}
		numKillsList.sort()
		numKillsList.reverse()
		return numKillsList[6]
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetNumWinsWithSevenCharactersForSeason( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	string seasonRef = calcEntry.enumKeys[0]

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) : ( seasonRef ) {
		array<int> numWinsList = []
		foreach ( ItemFlavor character in GetAllCharacters() )
		{
			numWinsList.append( GetStat_Int( player, ResolveStatEntry( CAREER_STATS.season_character_placements_win, seasonRef, ItemFlavor_GetGUIDString( character ) ), when ) )
		}
		numWinsList.sort()
		numWinsList.reverse()
		return numWinsList[6]
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetNumTop5WithSevenCharactersForSeason( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	string seasonRef = calcEntry.enumKeys[0]

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) : ( seasonRef ) {
		array<int> numTop5List = []
		foreach ( ItemFlavor character in GetAllCharacters() )
		{
			numTop5List.append( GetStat_Int( player, ResolveStatEntry( CAREER_STATS.season_character_placements_top_5, seasonRef, ItemFlavor_GetGUIDString( character ) ), when ) )
		}
		numTop5List.sort()
		numTop5List.reverse()
		return numTop5List[6]
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetNumCharactersWithMilestoneBonusBattlePassXPForSeason( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	string seasonRef = calcEntry.enumKeys[0]

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) : ( seasonRef ) {
		int milestone = 250000//

		int count = 0
		foreach ( ItemFlavor character in GetAllCharacters() )
		{
			int xp = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.season_character_battlepass_bonus_xp, seasonRef, ItemFlavor_GetGUIDString( character ) ), when )
			if ( xp >= milestone )
				count++
		}
		return count
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetNumWinsWithAllCharactersWraithEvent( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0
		foreach ( ItemFlavor character in GetAllCharacters() )
		{
			if ( GetStat_Int( player, ResolveStatEntry( CAREER_STATS.season02_event02_character_wins, ItemFlavor_GetGUIDString( character ) ), when ) >= 1 )
				count++
		}

		return count
	})

	return info
}
#endif


#if CLIENT || UI 
StatCalcFuncInfo function SetupS03E01LTMWinAsBothKinds( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0
		if ( GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s03e01_ltm_placements_win_legend ), when ) > 0 )
			count++
		if ( GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s03e01_ltm_placements_win_shadow ), when ) > 0 )
			count++
		return count
	})

	return info
}
#endif


#if CLIENT || UI 
StatCalcFuncInfo function SetupGetNumKillsWithAllCharactersWinterExpress( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0
		foreach ( ItemFlavor character in GetAllCharacters() )
		{
			if ( GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s03e02_winter_express_character_kills, ItemFlavor_GetGUIDString( character ) ), when ) >= 1 )
				count++
		}

		return count
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetArmedAndDangerousEvolvedCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int kills           = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s05e01_armed_and_dangerous_evolved_kills ), when )
		int wins            = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s05e01_armed_and_dangerous_evolved_wins ), when )
		int alliesRespawned = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s05e01_armed_and_dangerous_evolved_times_respawned_ally ), when )

		if ( kills >= 100 && wins >= 5 && alliesRespawned >= 15 )
			count = 1

		return count
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetCampfireCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int kills           = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s06e01_campfire_players_killed_in_zone ), when )
		int wins            = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s06e01_campfire_wins ), when )
		int damageDealt 	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s06e01_campfire_damage_dealt_in_zone ), when )

		if ( kills >= 100 && wins >= 10 && damageDealt >= 10000 )
			count = 1

		return count
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetShadowRoyaleCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int kills   = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s06e02_shadow_royale_kills ), when )
		int wins    = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s06e02_shadow_royale_wins ), when )
		int revives	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s06e02_shadow_royale_revives ), when )

		if ( kills >= 100 && wins >= 5 && revives >= 15 )
			count = 1

		return count
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetWinterExpressCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int captures           	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s07e01_winter_express_captures ), when )
		int damage           	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s07e01_winter_express_damage ), when )
		int kills 				= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s07e01_winter_express_kills ), when )

		if ( kills >= 100 && captures >= 100 && damage >= 10000 )
			count = 1

		return count
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetAirdropKittedCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int damage           	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s07e02_airdropkitted_damage_dealt ), when )
		int knockdowns          = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s07e02_airdropkitted_knockdowns ), when )
		int wins 				= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s07e02_airdropkitted_wins ), when )

		if ( damage >= 10000 && knockdowns >= 100 && wins >= 5 )
			count = 1

		return count
	})

	return info
}
#endif


#if CLIENT || UI 
StatCalcFuncInfo function SetupGetS08SeasonalCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int nessie           	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08seasonal_nessie_dailies ), when )
		int weapon          	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08seasonal_weapon_damage ), when )
		int character 			= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08seasonal_character_wins ), when )

		if ( nessie >= 75 )
			count++
		if ( weapon >= 102816 )
			count++
		if ( character >= 8 )
			count++

		return count
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetRingFuryCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int heatshield          = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08e01_ringfury_challenge_2 ), when )
		int damage          	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08e01_ringfury_challenge_3 ), when )
		int knockdowns			= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08e01_ringfury_challenge_4 ), when )

		if ( heatshield >= 1000 && damage >= 10000 && knockdowns >= 100 )
			count = 1

		return count
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetWarGamesCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int damage          	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08e02_wargames_challenge_2 ), when )
		int wins          		= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08e02_wargames_challenge_3 ), when )
		int knockdowns			= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08e02_wargames_challenge_4 ), when )

		if ( damage >= 15000 && wins >= 5 && knockdowns >= 250 )
			count = 1

		return count
	})

	return info
}
#endif

bool function CurrentModeSupportsCustomStats()
{
	string mode = GetCurrentPlaylistVarString( "stats_match_type", "survival" )

	return ( STATS_ALTERNATE_MODE_REFS.contains( mode ) )
}