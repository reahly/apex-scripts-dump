//

#if CLIENT || UI 
global function ShMusic_LevelInit
#endif

#if CLIENT || UI 
global function Loadout_MusicPack
global function MusicPack_GetSortOrdinal

global function MusicPack_GetPreviewMusic
#endif

#if CLIENT || UI 
global function GetMusicPackForPlayer
global function GetMusicPackDefaultIsSelectedLoadout
global function WaitForMusicPackForPlayer

//
global function MusicPack_GetMainMenuToLobbyMusic
global function MusicPack_GetLobbyMusic
global function MusicPack_GetLobbyIntoCharacterSelectMusic
global function MusicPack_GetCharacterSelectMusic_Squad
global function MusicPack_GetCharacterSelectMusic_Duo
global function MusicPack_GetCharacterSelectMusic_Solo
global function MusicPack_GetSkydiveMusic
global function MusicPack_GetWinMusic
global function MusicPack_GetLossMusic
global function MusicPack_GetFiringRangeMusic

global function MusicPack_GetCharacterOrNull
global function MusicPack_GetPortraitImage
global function MusicPack_GetPortraitBlend
#endif

#if(false)




#endif

#if(CLIENT)
global function ServerCallback_PlayMatchEndMusic
#endif

#if(false)

#endif

struct FileStruct_LifetimeLevel
{
	LoadoutEntry&          musicPackSelectionSlot
	table<ItemFlavor, int> musicPackFlavorSortOrdinalMap

	#if(false)

#endif
}
FileStruct_LifetimeLevel& fileLevel

#if CLIENT || UI 
void function ShMusic_LevelInit()
{
	FileStruct_LifetimeLevel newFileGame
	fileLevel = newFileGame

	AddCallback_RegisterRootItemFlavors( OnRegisterRootItemFlavors )

	#if(false)

#endif
}
#endif

#if CLIENT || UI 
void function OnRegisterRootItemFlavors()
{
	array<ItemFlavor> musicPackList = []
	foreach ( asset musicPackAsset in GetBaseItemFlavorsFromArray( "musicPacks" ) )
	{
		if ( musicPackAsset == $"" )
			continue

		ItemFlavor ornull musicPack = RegisterItemFlavorFromSettingsAsset( musicPackAsset )
		if ( musicPack == null )
			continue

		expect ItemFlavor( musicPack )
		musicPackList.append( musicPack )

		#if(CLIENT)
			array<string> verificationFields = [
				//
				//
				//
				"musicLobby",
				//
				"musicCharacterSelect",
				"musicSkydive",
				"musicWin",
				"musicLoss",
			]

			foreach( string field in verificationFields )
			{
				string alias = GetGlobalSettingsString( musicPackAsset, field )
				if ( !DoesAliasExist( alias ) )
					Warning( "Music Pack Asset '%s' has invalid '%s' miles event '%s'", ItemFlavor_GetHumanReadableRef( musicPack ), field, alias )
			}
		#endif
	}


	MakeItemFlavorSet( musicPackList, fileLevel.musicPackFlavorSortOrdinalMap )

	LoadoutEntry entry = RegisterLoadoutSlot( eLoadoutEntryType.ITEM_FLAVOR, "music_pack_selection" )
	entry.networkTo = eLoadoutNetworking.PLAYER_EXCLUSIVE
	//
	entry.DEV_name = "Music Pack"
	fileLevel.musicPackSelectionSlot = entry
	entry.validItemFlavorList = musicPackList
	entry.defaultItemFlavor = musicPackList[1]
	entry.favoriteItemFlavor = musicPackList[0]
	entry.maxFavoriteCount = 8

	#if(UI)
		AddCallback_ItemFlavorLoadoutSlotDidChange_AnyPlayer( entry, void function( EHI playerEHI, ItemFlavor flavor ) {
			if ( playerEHI != LocalClientEHI() )
				return

			if ( uiGlobal.WORKAROUND_activeMusicPack != flavor )
				UIMusicUpdate( true )
		} )
	#endif
}
#endif


#if CLIENT || UI 
ItemFlavor function GetMusicPackForPlayer( entity player )
{
	LoadoutEntry entry = Loadout_MusicPack()
	if ( !LoadoutSlot_IsReady( ToEHI( player ), entry ) )
		return GetDefaultItemFlavorForLoadoutSlot( EHI_null, entry )

	ItemFlavor flav = LoadoutSlot_GetItemFlavor( ToEHI( player ), entry )

	#if(CLIENT)
		if ( !IsLobby() && ItemFlavor_IsTheRandom( flav ) )
		{
			int guid = player.GetNonRewindMusicPack()
			if ( guid != 0 )
			{
				flav = GetItemFlavorByGUID( guid )
				//
			}
		}

		asset customPack = GetCurrentPlaylistVarAsset( "force_custom_musicpack" )
		if ( customPack != $"" )
		{
			printf( "%s() - Playlist forcing music pack to: '%s'", FUNC_NAME(), string( customPack ) )
			flav = GetItemFlavorByAsset( customPack )
		}
	#else
		flav = __GetMusicPackForPlayer_RollTheRandom( player )
	#endif //

	return flav
}

bool function GetMusicPackDefaultIsSelectedLoadout( entity player )
{
	LoadoutEntry entry = Loadout_MusicPack()
	if ( !LoadoutSlot_IsReady( ToEHI( player ), entry ) )
		return true

	ItemFlavor flav = LoadoutSlot_GetItemFlavor( ToEHI( player ), entry )
	if ( ItemFlavor_IsTheDefault( flav ) )
		return true

	return false
}
#endif


#if CLIENT || UI 
ItemFlavor function WaitForMusicPackForPlayer( entity player )
{
	return LoadoutSlot_WaitForItemFlavor( ToEHI( player ), Loadout_MusicPack() )
}
#endif


#if CLIENT || UI 
LoadoutEntry function Loadout_MusicPack()
{
	return fileLevel.musicPackSelectionSlot
}
#endif


#if CLIENT || UI 
int function MusicPack_GetSortOrdinal( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )

	return fileLevel.musicPackFlavorSortOrdinalMap[flavor]
}
#endif


#if CLIENT || UI 
string function MusicPack_GetPreviewMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicPreview" )
}
#endif


//
//
//
//
//
//
//

#if CLIENT || UI 
string function MusicPack_GetMainMenuToLobbyMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicMainMenuToLobby" )
}
#endif


#if CLIENT || UI 
string function MusicPack_GetLobbyMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicLobby" )
}

string function MusicPack_GetFiringRangeMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicFiringRange" )
}
#endif


#if CLIENT || UI 
string function MusicPack_GetLobbyIntoCharacterSelectMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicLobbyToCharacterSelect" )
}
#endif


#if CLIENT || UI 
string function MusicPack_GetCharacterSelectMusic_Squad( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicCharacterSelect" )
}
#endif


#if CLIENT || UI 
string function MusicPack_GetCharacterSelectMusic_Duo( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicCharacterSelectDuo" )
}
#endif


#if CLIENT || UI 
string function MusicPack_GetCharacterSelectMusic_Solo( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicCharacterSelectSolo" )
}
#endif


#if CLIENT || UI 
string function MusicPack_GetSkydiveMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicSkydive" )
}
#endif


#if CLIENT || UI 
string function MusicPack_GetWinMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicWin" )
}
#endif


#if CLIENT || UI 
string function MusicPack_GetLossMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicLoss" )
}
#endif


#if CLIENT || UI 
ItemFlavor ornull function MusicPack_GetCharacterOrNull( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )

	asset characterAsset = GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "character" )
	if ( characterAsset != $"" && IsValidItemFlavorSettingsAsset( characterAsset ) )
		return GetItemFlavorByAsset( characterAsset )

	return null
}
#endif


#if CLIENT || UI 
asset function MusicPack_GetPortraitImage( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )

	ItemFlavor ornull character = MusicPack_GetCharacterOrNull( flavor )
	if ( character != null )
		return CharacterClass_GetGalleryPortrait( expect ItemFlavor( character ) )

	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "portraitImage" )
}
#endif


#if CLIENT || UI 
float function MusicPack_GetPortraitBlend( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsFloat( ItemFlavor_GetAsset( flavor ), "portraitBlend" )
}
#endif


#if(false)

























#endif


#if(false)








#endif


#if(false)






#endif


#if(false)












#endif

#if(CLIENT)
void function ServerCallback_PlayMatchEndMusic()
{
	//
	//

	entity clientPlayer = GetLocalClientPlayer()
	if ( clientPlayer.GetTeam() == GetWinningTeam() )
	{
		EmitSoundOnEntity( clientPlayer, MusicPack_GetWinMusic( GetMusicPackForPlayer( clientPlayer ) ) )
	}
	else
	{
		StopSoundOnEntity( clientPlayer, MusicPack_GetLossMusic( GetMusicPackForPlayer( clientPlayer ) ) )
		EmitSoundOnEntity( clientPlayer, MusicPack_GetLossMusic( GetMusicPackForPlayer( clientPlayer ) ) )
	}
}
#endif


#if(false)











#endif


#if(false)














//


#endif

#if CLIENT || UI 
ItemFlavor function __GetMusicPackForPlayer_RollTheRandom( entity player )
{
	ItemFlavor music = WaitForMusicPackForPlayer( player )

	if ( GRX_IsInventoryReady( player ) && ItemFlavor_IsTheRandom( music ) )
	{
		LoadoutEntry musicSlot  = Loadout_MusicPack()
		array<ItemFlavor> items = clone GetValidItemFlavorsForLoadoutSlot( ToEHI( player ), musicSlot )

		foreach ( item in clone items )
		{
			if (
									(ItemFlavor_GetGRXMode( item ) != GRX_ITEMFLAVORMODE_NONE && !GRX_IsItemOwnedByPlayer( item, player ))
							|| ItemFlavor_IsTheRandom( item )
					)
				items.fastremovebyvalue( item )
		}

		if ( items.len() > 0 )
		{
			music = items.getrandom()
		}
	}

	return music
}
#endif