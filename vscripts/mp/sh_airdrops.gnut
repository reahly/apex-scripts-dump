global function Sh_Airdrops_Init
global function GetAirdropPingColorIDFromRarityTier

#if(false)





































//

#endif //

const bool DEBUG_DROP_POINTS = false

const string SOUND_CARE_PACKAGE_MARKER = "Survival_LootPod_Beacon_Marker"
const string SOUND_CARE_PACKAGE_STEAM = "Survival_LootPod_SteamSizzle"

global const string CARE_PACKAGE_ANIMATION = "droppod_loot_drop"

const float CARE_PACKAGE_OPEN_TIME = 6.0
const float CARE_PACKAGE_LIFELINE_OPEN_TIME = 1.0

const int AIRDROP_LARGE_DROP_COUNT = 4 //
const float AIRDROP_IGNORE_RING_MAX_DROP_RADIUS = 58000.0
const float AIRDROP_IGNORE_RING_STD_DROP_RADIUS = 40000.0
const float AIRDROP_IGNORE_RING_MIN_DROP_RADIUS = 20000.0

const vector AIRDROP_LOOT_OFFSET_HELMET 		= <-5, 0, 0>
const vector AIRDROP_LOOT_OFFSET_BACKPACK 		= <-10, 0, 0>
const vector AIRDROP_LOOT_OFFSET_HEALING 		= <-10, 0, 0>
const vector AIRDROP_LOOT_OFFSET_ARMOR 			= <-13, 0, 0>
const vector AIRDROP_LOOT_OFFSET_INCAPSHIELD 	= <-5, 0, 0>
const vector AIRDROP_LOOT_OFFSET_AMMO 			= <-3, 0, 0>
const vector AIRDROP_LOOT_OFFSET_WEAPON 		= <-4, 8, -8>
const vector AIRDROP_LOOT_OFFSET_GADGET			= <-5, 0, 0>


global enum eAirdropRingArea
{
	IGNORE_RING, 			//
	PREVIOUS_RING, 			//
	CURRENT_RING,	 		//

	_count
}

global enum eAirdropSpeed
{
	INSTANT, 	//
	FAST, 		//
	STANDARD 	//
}

global enum eAirdropType
{
	STANDARD, 				//
	CHARACTER_CAREPACKAGE,	//
                
	CRAFTING_REPLICATOR,	//
      

	_count
}

global struct AirdropData
{
	int                                     dropCircle
	int                                     dropCount
	float                                   preWait
	array<int>                           	rarityArray
	array<vector>                           originArray
                                
	array< array<vector> > 					clusterOriginArray
      
	array<vector>                           anglesArray
	string                                  type = "titan"
	array< array<string> >                  contents
	array< array< array<string> > >         contentsArray
	array< array<string> > functionref(int) optionalGetContentsFunc
	int                                     airdropRingArea = eAirdropRingArea.CURRENT_RING
	int										airdropSpeed = eAirdropSpeed.STANDARD
	bool									airdropRadiusOverrideEnabled = false
	float									airdropRadiusOverride = AIRDROP_IGNORE_RING_STD_DROP_RADIUS
	float									airdropRadiusOverride_LargeCount_Inner = AIRDROP_IGNORE_RING_MIN_DROP_RADIUS
	float									airdropRadiusOverride_LargeCount_Outer = AIRDROP_IGNORE_RING_MAX_DROP_RADIUS
	float                                   minDelayBetweenPods = 3.0
	float                                   maxDelayBetweenPods = 5.0
	string                                  animation = CARE_PACKAGE_ANIMATION
	float									animationDuration
	bool									launched = false
}

struct
{
	#if(false)














#endif

} file

void function Sh_Airdrops_Init()
{
	RegisterSignal( "OpenDroppod" )
	RegisterSignal( "DroppodRemoveLocationMarker" )


	#if(CLIENT)
		AddCreateCallback( "prop_dynamic", OnAirdropCreated )
	#elseif(false)


#endif
}

int function GetAirdropPingColorIDFromRarityTier( int rarityTier )
{
	switch ( rarityTier )
	{
		case eLootTier.COMMON:
			return COLORID_HUD_LOOT_TIER1
		case eLootTier.RARE:
			return COLORID_HUD_LOOT_TIER2
		case eLootTier.EPIC:
			return COLORID_HUD_LOOT_TIER3
		case eLootTier.LEGENDARY:
			return COLORID_HUD_LOOT_TIER4
		case eLootTier.HEIRLOOM:
			return COLORID_HUD_LOOT_TIER5
	}
	return COLORID_AIRDROP_DEFAULT_COLOR
}

#if(false)




























































































//




















//














































































































































































































































































































































































































//























































//





















//








































































//
































































































































































































































































#endif

void function OnAirdropCreated( entity dropPod )
{
	if ( dropPod.GetTargetName() != CARE_PACKAGE_TARGETNAME && dropPod.GetTargetName() != CARE_PACKAGE_LIFELINE_TARGETNAME )
		return

	AddCallback_OnUseEntity_ClientServer( dropPod, OnAirdropUse )

	#if(CLIENT)
		AddEntityCallback_GetUseEntOverrideText( dropPod, ExtendedUseTextOverride )
	#endif
}

void function OnAirdropUse( entity dropPod, entity player, int useInputFlags )
{
	//
	//
	//
	//

	if ( useInputFlags & USE_INPUT_DEFAULT )
	{
		#if(false)


#endif
	}
}


void function AirdropUseThink( entity ent, entity playerUser )
{
	ExtendedUseSettings settings
	#if(CLIENT)
		settings.loopSound = "survival_titan_linking_loop"
		settings.successSound = "ui_menu_store_purchase_success"
		settings.displayRui = $"ui/extended_use_hint.rpak"
		settings.displayRuiFunc = DefaultExtendedUseRui
		settings.icon = $""
		settings.hint = "#PROMPT_OPEN"
	#elseif(false)



#endif

	settings.duration = ent.GetTargetName() == CARE_PACKAGE_TARGETNAME ? CARE_PACKAGE_OPEN_TIME : CARE_PACKAGE_LIFELINE_OPEN_TIME
	settings.requireMatchingUseEnt = true

	ent.EndSignal( "OnDestroy" )

	waitthread ExtendedUse( ent, playerUser, settings )
}

void function SignalOpenAirdrop( entity ent, entity player, ExtendedUseSettings settings )
{
	ent.Signal( "OpenDroppod" )

	#if(false)

#endif
}

#if(false)




























#endif