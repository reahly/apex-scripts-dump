global function Sh_SkydiveLaunchers_Init

#if(false)




#endif //

//
global enum eSkydiveLauncherType
{
	DEFAULT,
	SHORT_HEIGHT,
                       
                 
       
	//
}

enum eSkydiveLauncherThreshold
{
	FLOOR,
	CEILING
}

enum eSkydiveLauncherVelocityType
{
	VERTICAL,
	ABSOLUTE
}
//


#if(false)
















#endif //
struct
{
	#if(false)




#endif //
	bool holsterWeaponsOnAscent
} file


//
//
//
global asset FX_SKYDIVE_LAUNCHER_LOOP_DEFAULT = $""
global asset FX_SKYDIVE_LAUNCHER_LOOP_NO_SNOW = $""
#if(false)


#endif //



void function Sh_SkydiveLaunchers_Init()
{
	#if(CLIENT)
		AddCreateCallback( "trigger_cylinder_heavy", OnSkydiveLauncherCreated )
	#endif

	#if(false)


#endif

	file.holsterWeaponsOnAscent = GetCurrentPlaylistVarBool( "skydive_launchers_holster_weapons", true )
}


#if(false)


















//

#endif



#if(false)

























#endif



#if(false)































//











































//




























//
//
//










//
//

//
//

//






//
//





//





//







//








//










































































#endif //



#if(false)












#endif //


#if(false)














//
//










#endif //



#if(false)
























/*




*/

































//





//















/*



*/



































#endif //


#if(false)






















#endif //


#if(false)








/*











*/



#endif //


#if(false)
















#endif //

void function OnSkydiveLauncherDestroyed( entity trigger )
{
	if ( trigger.GetTargetName() != "skydive_launcher_trigger" )
		return

	if ( trigger.GetScriptName() == "" )
		return

	trigger.SetScriptName( "" )
}


#if(CLIENT)
void function OnSkydiveLauncherCreated( entity trigger )
{
	if ( trigger.GetTargetName() != "skydive_launcher_trigger" )
		return

	AddEntityDestroyedCallback( trigger, OnSkydiveLauncherDestroyed )

	vector triggerOrigin = trigger.GetOrigin()
	entity clientAG = CreateClientSideAmbientGeneric( triggerOrigin + <0,0,16>, "WXpress_Emit_LaunchPad_Loop", 0 )
	clientAG.SetSegmentEndpoints( triggerOrigin + <0,0,16>, triggerOrigin + <0, 0, 72> )
	clientAG.SetEnabled( true )
	clientAG.RemoveFromAllRealms()
	clientAG.AddToOtherEntitysRealms( trigger )
	clientAG.SetParent( trigger, "", true, 0.0 )

	trigger.SetClientEnterCallback( void function( entity trigger, entity player )
	{
		entity localViewPlayer = GetLocalViewPlayer()
		if ( player != localViewPlayer )
			return

		if ( !IsPilot( player ) )
			return

		string scriptName = trigger.GetScriptName()
		Assert( IsValid( scriptName ), "Client can't get the script name of the skydive launch trigger" )
		int skydiveLauncherType = scriptName.tointeger()
		string sfxLaunchPlayer1p
		string sfxAirborneMvmt1p

		switch( skydiveLauncherType )
		{
			case eSkydiveLauncherType.DEFAULT:
			case eSkydiveLauncherType.SHORT_HEIGHT:
                        
                                            
        
				sfxLaunchPlayer1p = "WXpress_LaunchPad"
				sfxAirborneMvmt1p = "JumpPad_Ascent_Windrush"
				break
			default:
				Assert( 0, "Unhandled eSkydiveLauncherType on client: " + skydiveLauncherType )


		}
		EmitSoundOnEntity( player, sfxLaunchPlayer1p )
		EmitSoundOnEntity( player, sfxAirborneMvmt1p )

		Chroma_UsedJumpPad()

	} )
}
#endif //


#if(false)


//


#endif //

#if(false)


















//



//


//

//
//

//
//






























//



//
//

//



#endif //

